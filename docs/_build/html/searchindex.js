Search.setIndex({"docnames": ["guide/considerations", "guide/index", "guide/mathematics", "guide/neurons", "index", "reference/functional", "reference/generated/inferno.ContextualHook", "reference/generated/inferno.DimensionalModule", "reference/generated/inferno.Hook", "reference/generated/inferno.Module", "reference/generated/inferno.RecordModule", "reference/generated/inferno.StateHook", "reference/generated/inferno.astensors", "reference/generated/inferno.bounding.FullBounding", "reference/generated/inferno.bounding.HalfBounding", "reference/generated/inferno.bounding.lower_multiplicative", "reference/generated/inferno.bounding.lower_power", "reference/generated/inferno.bounding.lower_sharp", "reference/generated/inferno.bounding.multiplicative", "reference/generated/inferno.bounding.power", "reference/generated/inferno.bounding.sharp", "reference/generated/inferno.bounding.upper_multiplicative", "reference/generated/inferno.bounding.upper_power", "reference/generated/inferno.bounding.upper_sharp", "reference/generated/inferno.empty", "reference/generated/inferno.exp", "reference/generated/inferno.exponential_smoothing", "reference/generated/inferno.full", "reference/generated/inferno.functional.Extrapolation", "reference/generated/inferno.functional.FullBounding", "reference/generated/inferno.functional.HalfBounding", "reference/generated/inferno.functional.Interpolation", "reference/generated/inferno.functional.bound_lower_multiplicative", "reference/generated/inferno.functional.bound_lower_power", "reference/generated/inferno.functional.bound_lower_sharp", "reference/generated/inferno.functional.bound_multiplicative", "reference/generated/inferno.functional.bound_power", "reference/generated/inferno.functional.bound_sharp", "reference/generated/inferno.functional.bound_upper_multiplicative", "reference/generated/inferno.functional.bound_upper_power", "reference/generated/inferno.functional.bound_upper_sharp", "reference/generated/inferno.functional.extrap_expdecay", "reference/generated/inferno.functional.extrap_expratedecay", "reference/generated/inferno.functional.extrap_linear_backward", "reference/generated/inferno.functional.extrap_linear_forward", "reference/generated/inferno.functional.extrap_nearest", "reference/generated/inferno.functional.extrap_neighbors", "reference/generated/inferno.functional.extrap_next", "reference/generated/inferno.functional.extrap_previous", "reference/generated/inferno.functional.interp_expdecay", "reference/generated/inferno.functional.interp_expratedecay", "reference/generated/inferno.functional.interp_linear", "reference/generated/inferno.functional.interp_nearest", "reference/generated/inferno.functional.interp_next", "reference/generated/inferno.functional.interp_previous", "reference/generated/inferno.holt_linear_smoothing", "reference/generated/inferno.interpolation.Interpolation", "reference/generated/inferno.interpolation.expdecay", "reference/generated/inferno.interpolation.expratedecay", "reference/generated/inferno.interpolation.linear", "reference/generated/inferno.interpolation.nearest", "reference/generated/inferno.interpolation.previous", "reference/generated/inferno.isi", "reference/generated/inferno.learn.CellTrainer", "reference/generated/inferno.learn.IndependentTrainer", "reference/generated/inferno.learn.MSTDPET", "reference/generated/inferno.learn.MaxRateClassifier", "reference/generated/inferno.learn.STDP", "reference/generated/inferno.neural.ALIF", "reference/generated/inferno.neural.AdEx", "reference/generated/inferno.neural.Biclique", "reference/generated/inferno.neural.Cell", "reference/generated/inferno.neural.Clamping", "reference/generated/inferno.neural.Connection", "reference/generated/inferno.neural.Conv2D", "reference/generated/inferno.neural.DeltaCurrent", "reference/generated/inferno.neural.DeltaPlusCurrent", "reference/generated/inferno.neural.EIF", "reference/generated/inferno.neural.GLIF1", "reference/generated/inferno.neural.GLIF2", "reference/generated/inferno.neural.HomogeneousPoissonEncoder", "reference/generated/inferno.neural.Izhikevich", "reference/generated/inferno.neural.LIF", "reference/generated/inferno.neural.Layer", "reference/generated/inferno.neural.LinearDense", "reference/generated/inferno.neural.LinearDirect", "reference/generated/inferno.neural.LinearLateral", "reference/generated/inferno.neural.Neuron", "reference/generated/inferno.neural.Normalization", "reference/generated/inferno.neural.PoissonIntervalEncoder", "reference/generated/inferno.neural.QIF", "reference/generated/inferno.neural.Serial", "reference/generated/inferno.neural.Synapse", "reference/generated/inferno.neural.SynapseConstructor", "reference/generated/inferno.neural.Updatable", "reference/generated/inferno.neural.Updater", "reference/generated/inferno.neural.connections.mixins.WeightBiasDelayMixin", "reference/generated/inferno.neural.connections.mixins.WeightBiasMixin", "reference/generated/inferno.neural.connections.mixins.WeightMixin", "reference/generated/inferno.neural.functional.adaptive_currents_linear", "reference/generated/inferno.neural.functional.adaptive_thresholds_linear_spike", "reference/generated/inferno.neural.functional.adaptive_thresholds_linear_voltage", "reference/generated/inferno.neural.functional.apply_adaptive_currents", "reference/generated/inferno.neural.functional.apply_adaptive_thresholds", "reference/generated/inferno.neural.functional.enc_homogeneous_poisson_exp_interval", "reference/generated/inferno.neural.functional.enc_homogeneous_poisson_exp_interval_online", "reference/generated/inferno.neural.functional.enc_inhomogenous_poisson_bernoulli_approx", "reference/generated/inferno.neural.functional.enc_poisson_interval", "reference/generated/inferno.neural.functional.enc_poisson_interval_online", "reference/generated/inferno.neural.functional.voltage_integration_linear", "reference/generated/inferno.neural.functional.voltage_integration_quadratic", "reference/generated/inferno.neural.functional.voltage_thresholding_constant", "reference/generated/inferno.neural.functional.voltage_thresholding_linear", "reference/generated/inferno.neural.mixins.BatchMixin", "reference/generated/inferno.neural.mixins.ShapeMixin", "reference/generated/inferno.neural.neurons.mixins.AdaptationMixin", "reference/generated/inferno.neural.neurons.mixins.CurrentMixin", "reference/generated/inferno.neural.neurons.mixins.RefractoryMixin", "reference/generated/inferno.neural.neurons.mixins.SpikeRefractoryMixin", "reference/generated/inferno.neural.neurons.mixins.VoltageMixin", "reference/generated/inferno.neural.synapses.mixins.CurrentDerivedSpikeMixin", "reference/generated/inferno.neural.synapses.mixins.CurrentMixin", "reference/generated/inferno.neural.synapses.mixins.DelayedSpikeCurrentAccessorMixin", "reference/generated/inferno.neural.synapses.mixins.SpikeCurrentMixin", "reference/generated/inferno.neural.synapses.mixins.SpikeDerivedCurrentMixin", "reference/generated/inferno.neural.synapses.mixins.SpikeMixin", "reference/generated/inferno.normal", "reference/generated/inferno.normalize", "reference/generated/inferno.observe.ConditionalCumulativeTraceReducer", "reference/generated/inferno.observe.ConditionalNearestTraceReducer", "reference/generated/inferno.observe.CumulativeTraceReducer", "reference/generated/inferno.observe.DifferenceMonitor", "reference/generated/inferno.observe.EMAReducer", "reference/generated/inferno.observe.EventReducer", "reference/generated/inferno.observe.FoldReducer", "reference/generated/inferno.observe.FoldingReducer", "reference/generated/inferno.observe.InputMonitor", "reference/generated/inferno.observe.Monitor", "reference/generated/inferno.observe.MonitorConstructor", "reference/generated/inferno.observe.NearestTraceReducer", "reference/generated/inferno.observe.OutputMonitor", "reference/generated/inferno.observe.PassthroughReducer", "reference/generated/inferno.observe.Reducer", "reference/generated/inferno.observe.ScaledCumulativeTraceReducer", "reference/generated/inferno.observe.ScaledNearestTraceReducer", "reference/generated/inferno.observe.StateMonitor", "reference/generated/inferno.ones", "reference/generated/inferno.rescale", "reference/generated/inferno.scalar", "reference/generated/inferno.sqrt", "reference/generated/inferno.stats.LogNormal", "reference/generated/inferno.stats.Normal", "reference/generated/inferno.stats.Poisson", "reference/generated/inferno.trace_cumulative", "reference/generated/inferno.trace_cumulative_scaled", "reference/generated/inferno.trace_nearest", "reference/generated/inferno.trace_nearest_scaled", "reference/generated/inferno.types.ManyToMany", "reference/generated/inferno.types.ManyToManyMethod", "reference/generated/inferno.types.ManyToOne", "reference/generated/inferno.types.ManyToOneMethod", "reference/generated/inferno.types.OneToMany", "reference/generated/inferno.types.OneToManyMethod", "reference/generated/inferno.types.OneToOne", "reference/generated/inferno.types.OneToOneMethod", "reference/generated/inferno.uniform", "reference/generated/inferno.zeros", "reference/index", "reference/inferno", "reference/learn", "reference/neural", "reference/neural-functional", "reference/observe", "reference/stats", "zoo/index", "zoo/learning-resume", "zoo/learning-stdp", "zoo/neurons-adaptation", "zoo/neurons-linear", "zoo/neurons-nonlinear", "zoo/synapses-conductance", "zoo/synapses-current"], "filenames": ["guide/considerations.md", "guide/index.md", "guide/mathematics.md", "guide/neurons.md", "index.md", "reference/functional.md", "reference/generated/inferno.ContextualHook.rst", "reference/generated/inferno.DimensionalModule.rst", "reference/generated/inferno.Hook.rst", "reference/generated/inferno.Module.rst", "reference/generated/inferno.RecordModule.rst", "reference/generated/inferno.StateHook.rst", "reference/generated/inferno.astensors.rst", "reference/generated/inferno.bounding.FullBounding.rst", "reference/generated/inferno.bounding.HalfBounding.rst", "reference/generated/inferno.bounding.lower_multiplicative.rst", "reference/generated/inferno.bounding.lower_power.rst", "reference/generated/inferno.bounding.lower_sharp.rst", "reference/generated/inferno.bounding.multiplicative.rst", "reference/generated/inferno.bounding.power.rst", "reference/generated/inferno.bounding.sharp.rst", "reference/generated/inferno.bounding.upper_multiplicative.rst", "reference/generated/inferno.bounding.upper_power.rst", "reference/generated/inferno.bounding.upper_sharp.rst", "reference/generated/inferno.empty.rst", "reference/generated/inferno.exp.rst", "reference/generated/inferno.exponential_smoothing.rst", "reference/generated/inferno.full.rst", "reference/generated/inferno.functional.Extrapolation.rst", "reference/generated/inferno.functional.FullBounding.rst", "reference/generated/inferno.functional.HalfBounding.rst", "reference/generated/inferno.functional.Interpolation.rst", "reference/generated/inferno.functional.bound_lower_multiplicative.rst", "reference/generated/inferno.functional.bound_lower_power.rst", "reference/generated/inferno.functional.bound_lower_sharp.rst", "reference/generated/inferno.functional.bound_multiplicative.rst", "reference/generated/inferno.functional.bound_power.rst", "reference/generated/inferno.functional.bound_sharp.rst", "reference/generated/inferno.functional.bound_upper_multiplicative.rst", "reference/generated/inferno.functional.bound_upper_power.rst", "reference/generated/inferno.functional.bound_upper_sharp.rst", "reference/generated/inferno.functional.extrap_expdecay.rst", "reference/generated/inferno.functional.extrap_expratedecay.rst", "reference/generated/inferno.functional.extrap_linear_backward.rst", "reference/generated/inferno.functional.extrap_linear_forward.rst", "reference/generated/inferno.functional.extrap_nearest.rst", "reference/generated/inferno.functional.extrap_neighbors.rst", "reference/generated/inferno.functional.extrap_next.rst", "reference/generated/inferno.functional.extrap_previous.rst", "reference/generated/inferno.functional.interp_expdecay.rst", "reference/generated/inferno.functional.interp_expratedecay.rst", "reference/generated/inferno.functional.interp_linear.rst", "reference/generated/inferno.functional.interp_nearest.rst", "reference/generated/inferno.functional.interp_next.rst", "reference/generated/inferno.functional.interp_previous.rst", "reference/generated/inferno.holt_linear_smoothing.rst", "reference/generated/inferno.interpolation.Interpolation.rst", "reference/generated/inferno.interpolation.expdecay.rst", "reference/generated/inferno.interpolation.expratedecay.rst", "reference/generated/inferno.interpolation.linear.rst", "reference/generated/inferno.interpolation.nearest.rst", "reference/generated/inferno.interpolation.previous.rst", "reference/generated/inferno.isi.rst", "reference/generated/inferno.learn.CellTrainer.rst", "reference/generated/inferno.learn.IndependentTrainer.rst", "reference/generated/inferno.learn.MSTDPET.rst", "reference/generated/inferno.learn.MaxRateClassifier.rst", "reference/generated/inferno.learn.STDP.rst", "reference/generated/inferno.neural.ALIF.rst", "reference/generated/inferno.neural.AdEx.rst", "reference/generated/inferno.neural.Biclique.rst", "reference/generated/inferno.neural.Cell.rst", "reference/generated/inferno.neural.Clamping.rst", "reference/generated/inferno.neural.Connection.rst", "reference/generated/inferno.neural.Conv2D.rst", "reference/generated/inferno.neural.DeltaCurrent.rst", "reference/generated/inferno.neural.DeltaPlusCurrent.rst", "reference/generated/inferno.neural.EIF.rst", "reference/generated/inferno.neural.GLIF1.rst", "reference/generated/inferno.neural.GLIF2.rst", "reference/generated/inferno.neural.HomogeneousPoissonEncoder.rst", "reference/generated/inferno.neural.Izhikevich.rst", "reference/generated/inferno.neural.LIF.rst", "reference/generated/inferno.neural.Layer.rst", "reference/generated/inferno.neural.LinearDense.rst", "reference/generated/inferno.neural.LinearDirect.rst", "reference/generated/inferno.neural.LinearLateral.rst", "reference/generated/inferno.neural.Neuron.rst", "reference/generated/inferno.neural.Normalization.rst", "reference/generated/inferno.neural.PoissonIntervalEncoder.rst", "reference/generated/inferno.neural.QIF.rst", "reference/generated/inferno.neural.Serial.rst", "reference/generated/inferno.neural.Synapse.rst", "reference/generated/inferno.neural.SynapseConstructor.rst", "reference/generated/inferno.neural.Updatable.rst", "reference/generated/inferno.neural.Updater.rst", "reference/generated/inferno.neural.connections.mixins.WeightBiasDelayMixin.rst", "reference/generated/inferno.neural.connections.mixins.WeightBiasMixin.rst", "reference/generated/inferno.neural.connections.mixins.WeightMixin.rst", "reference/generated/inferno.neural.functional.adaptive_currents_linear.rst", "reference/generated/inferno.neural.functional.adaptive_thresholds_linear_spike.rst", "reference/generated/inferno.neural.functional.adaptive_thresholds_linear_voltage.rst", "reference/generated/inferno.neural.functional.apply_adaptive_currents.rst", "reference/generated/inferno.neural.functional.apply_adaptive_thresholds.rst", "reference/generated/inferno.neural.functional.enc_homogeneous_poisson_exp_interval.rst", "reference/generated/inferno.neural.functional.enc_homogeneous_poisson_exp_interval_online.rst", "reference/generated/inferno.neural.functional.enc_inhomogenous_poisson_bernoulli_approx.rst", "reference/generated/inferno.neural.functional.enc_poisson_interval.rst", "reference/generated/inferno.neural.functional.enc_poisson_interval_online.rst", "reference/generated/inferno.neural.functional.voltage_integration_linear.rst", "reference/generated/inferno.neural.functional.voltage_integration_quadratic.rst", "reference/generated/inferno.neural.functional.voltage_thresholding_constant.rst", "reference/generated/inferno.neural.functional.voltage_thresholding_linear.rst", "reference/generated/inferno.neural.mixins.BatchMixin.rst", "reference/generated/inferno.neural.mixins.ShapeMixin.rst", "reference/generated/inferno.neural.neurons.mixins.AdaptationMixin.rst", "reference/generated/inferno.neural.neurons.mixins.CurrentMixin.rst", "reference/generated/inferno.neural.neurons.mixins.RefractoryMixin.rst", "reference/generated/inferno.neural.neurons.mixins.SpikeRefractoryMixin.rst", "reference/generated/inferno.neural.neurons.mixins.VoltageMixin.rst", "reference/generated/inferno.neural.synapses.mixins.CurrentDerivedSpikeMixin.rst", "reference/generated/inferno.neural.synapses.mixins.CurrentMixin.rst", "reference/generated/inferno.neural.synapses.mixins.DelayedSpikeCurrentAccessorMixin.rst", "reference/generated/inferno.neural.synapses.mixins.SpikeCurrentMixin.rst", "reference/generated/inferno.neural.synapses.mixins.SpikeDerivedCurrentMixin.rst", "reference/generated/inferno.neural.synapses.mixins.SpikeMixin.rst", "reference/generated/inferno.normal.rst", "reference/generated/inferno.normalize.rst", "reference/generated/inferno.observe.ConditionalCumulativeTraceReducer.rst", "reference/generated/inferno.observe.ConditionalNearestTraceReducer.rst", "reference/generated/inferno.observe.CumulativeTraceReducer.rst", "reference/generated/inferno.observe.DifferenceMonitor.rst", "reference/generated/inferno.observe.EMAReducer.rst", "reference/generated/inferno.observe.EventReducer.rst", "reference/generated/inferno.observe.FoldReducer.rst", "reference/generated/inferno.observe.FoldingReducer.rst", "reference/generated/inferno.observe.InputMonitor.rst", "reference/generated/inferno.observe.Monitor.rst", "reference/generated/inferno.observe.MonitorConstructor.rst", "reference/generated/inferno.observe.NearestTraceReducer.rst", "reference/generated/inferno.observe.OutputMonitor.rst", "reference/generated/inferno.observe.PassthroughReducer.rst", "reference/generated/inferno.observe.Reducer.rst", "reference/generated/inferno.observe.ScaledCumulativeTraceReducer.rst", "reference/generated/inferno.observe.ScaledNearestTraceReducer.rst", "reference/generated/inferno.observe.StateMonitor.rst", "reference/generated/inferno.ones.rst", "reference/generated/inferno.rescale.rst", "reference/generated/inferno.scalar.rst", "reference/generated/inferno.sqrt.rst", "reference/generated/inferno.stats.LogNormal.rst", "reference/generated/inferno.stats.Normal.rst", "reference/generated/inferno.stats.Poisson.rst", "reference/generated/inferno.trace_cumulative.rst", "reference/generated/inferno.trace_cumulative_scaled.rst", "reference/generated/inferno.trace_nearest.rst", "reference/generated/inferno.trace_nearest_scaled.rst", "reference/generated/inferno.types.ManyToMany.rst", "reference/generated/inferno.types.ManyToManyMethod.rst", "reference/generated/inferno.types.ManyToOne.rst", "reference/generated/inferno.types.ManyToOneMethod.rst", "reference/generated/inferno.types.OneToMany.rst", "reference/generated/inferno.types.OneToManyMethod.rst", "reference/generated/inferno.types.OneToOne.rst", "reference/generated/inferno.types.OneToOneMethod.rst", "reference/generated/inferno.uniform.rst", "reference/generated/inferno.zeros.rst", "reference/index.md", "reference/inferno.md", "reference/learn.md", "reference/neural.md", "reference/neural-functional.md", "reference/observe.md", "reference/stats.md", "zoo/index.md", "zoo/learning-resume.md", "zoo/learning-stdp.md", "zoo/neurons-adaptation.md", "zoo/neurons-linear.md", "zoo/neurons-nonlinear.md", "zoo/synapses-conductance.md", "zoo/synapses-current.md"], "titles": ["Pragmatic Considerations", "Guidebook", "Mathematical Notes", "Neurons and Neuronal Systems", "Welcome to Inferno\u2019s documentation!", "inferno.functional", "ContextualHook", "DimensionalModule", "Hook", "Module", "RecordModule", "StateHook", "astensors", "FullBounding", "HalfBounding", "lower_multiplicative", "lower_power", "lower_sharp", "multiplicative", "power", "sharp", "upper_multiplicative", "upper_power", "upper_sharp", "empty", "exp", "exponential_smoothing", "full", "Extrapolation", "FullBounding", "HalfBounding", "Interpolation", "bound_lower_multiplicative", "bound_lower_power", "bound_lower_sharp", "bound_multiplicative", "bound_power", "bound_sharp", "bound_upper_multiplicative", "bound_upper_power", "bound_upper_sharp", "extrap_expdecay", "extrap_expratedecay", "extrap_linear_backward", "extrap_linear_forward", "extrap_nearest", "extrap_neighbors", "extrap_next", "extrap_previous", "interp_expdecay", "interp_expratedecay", "interp_linear", "interp_nearest", "interp_next", "interp_previous", "holt_linear_smoothing", "Interpolation", "expdecay", "expratedecay", "linear", "nearest", "previous", "isi", "CellTrainer", "IndependentTrainer", "MSTDPET", "MaxRateClassifier", "STDP", "ALIF", "AdEx", "Biclique", "Cell", "Clamping", "Connection", "Conv2D", "DeltaCurrent", "DeltaPlusCurrent", "EIF", "GLIF1", "GLIF2", "HomogeneousPoissonEncoder", "Izhikevich", "LIF", "Layer", "LinearDense", "LinearDirect", "LinearLateral", "Neuron", "Normalization", "PoissonIntervalEncoder", "QIF", "Serial", "Synapse", "SynapseConstructor", "Updatable", "Updater", "WeightBiasDelayMixin", "WeightBiasMixin", "WeightMixin", "adaptive_currents_linear", "adaptive_thresholds_linear_spike", "adaptive_thresholds_linear_voltage", "apply_adaptive_currents", "apply_adaptive_thresholds", "enc_homogeneous_poisson_exp_interval", "enc_homogeneous_poisson_exp_interval_online", "enc_inhomogenous_poisson_bernoulli_approx", "enc_poisson_interval", "enc_poisson_interval_online", "voltage_integration_linear", "voltage_integration_quadratic", "voltage_thresholding_constant", "voltage_thresholding_linear", "BatchMixin", "ShapeMixin", "AdaptationMixin", "CurrentMixin", "RefractoryMixin", "SpikeRefractoryMixin", "VoltageMixin", "CurrentDerivedSpikeMixin", "CurrentMixin", "DelayedSpikeCurrentAccessorMixin", "SpikeCurrentMixin", "SpikeDerivedCurrentMixin", "SpikeMixin", "normal", "normalize", "ConditionalCumulativeTraceReducer", "ConditionalNearestTraceReducer", "CumulativeTraceReducer", "DifferenceMonitor", "EMAReducer", "EventReducer", "FoldReducer", "FoldingReducer", "InputMonitor", "Monitor", "MonitorConstructor", "NearestTraceReducer", "OutputMonitor", "PassthroughReducer", "Reducer", "ScaledCumulativeTraceReducer", "ScaledNearestTraceReducer", "StateMonitor", "ones", "rescale", "scalar", "sqrt", "LogNormal", "Normal", "Poisson", "trace_cumulative", "trace_cumulative_scaled", "trace_nearest", "trace_nearest_scaled", "ManyToMany", "ManyToManyMethod", "ManyToOne", "ManyToOneMethod", "OneToMany", "OneToManyMethod", "OneToOne", "OneToOneMethod", "uniform", "zeros", "API Reference", "inferno", "inferno.learn", "inferno.neural", "inferno.neural.functional", "inferno.observe", "inferno.stats", "Model and Method Zoo", "ReSuMe-Like Learning Methods", "STDP-Like Learning Methods", "Neuronal Adaptation", "Neuron Models, Linear", "Neuron Models, Nonlinear", "Synapse Models, Conductance-Based", "Synapse Models, Current-Based"], "terms": {"unlik": [0, 11], "artifici": 0, "neuron": [0, 62, 65, 66, 67, 68, 69, 70, 71, 73, 77, 78, 79, 81, 82, 83, 90, 91, 99, 100, 101, 109, 110, 111, 112, 115, 116, 117, 118, 119, 176, 181], "typic": [0, 2, 9, 176, 177, 179], "found": [0, 9], "ann": 0, "snn": 0, "ar": [0, 2, 7, 10, 12, 63, 65, 66, 67, 68, 69, 70, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 111, 112, 118, 120, 122, 124, 131, 134, 135, 136, 137, 147, 150, 151, 152, 154, 156, 174, 176, 177, 178, 179], "fundament": 0, "state": [0, 3, 7, 9, 10, 11, 26, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 90, 92, 94, 95, 111, 112, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 141, 142, 143, 144, 145, 153, 154, 155, 156], "In": [0, 2, 3, 9, 10, 134, 176, 178, 181], "biolog": [0, 2, 3, 178], "electr": [0, 177, 178, 179, 181], "potenti": [0, 2, 3, 18, 19, 20, 21, 22, 23, 35, 36, 37, 38, 39, 40, 65, 67, 68, 69, 71, 77, 78, 79, 81, 82, 87, 90, 99, 100, 101, 109, 110, 111, 112, 118, 176, 177, 178, 179, 181], "differ": [0, 10, 64, 65, 66, 67, 68, 69, 75, 76, 77, 79, 81, 82, 90, 99, 101, 109, 110, 112, 122, 130, 131, 134, 139, 153, 155, 177, 178, 179], "between": [0, 10, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 70, 73, 75, 76, 80, 83, 89, 91, 104, 105, 106, 107, 108, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 143, 144, 176, 179], "interior": 0, "exterior": 0, "cell": [0, 63, 64, 65, 67, 68, 69, 70, 77, 79, 81, 82, 83, 90, 91, 109, 110, 176, 177, 178, 179], "i": [0, 2, 3, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 56, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 122, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 150, 151, 152, 154, 156, 176, 177, 178, 179, 181], "drive": 0, "forc": [0, 11], "behind": [0, 2], "gener": [0, 2, 3, 62, 68, 69, 71, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 99, 100, 101, 104, 105, 106, 107, 108, 111, 112, 118, 126, 150, 151, 152, 165, 174, 176, 177, 179], "action": [0, 2, 3, 68, 69, 71, 77, 78, 79, 81, 82, 87, 90, 99, 100, 101, 111, 112, 118, 177, 178, 179, 181], "thi": [0, 2, 3, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 79, 80, 81, 83, 87, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 134, 136, 137, 140, 142, 145, 152, 154, 156, 165, 176, 177, 178, 179, 181], "extend": [0, 9, 126, 165], "simplifi": [0, 181], "us": [0, 2, 3, 6, 8, 9, 12, 13, 14, 28, 29, 30, 31, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 83, 84, 85, 86, 90, 91, 93, 95, 99, 101, 104, 109, 110, 122, 128, 129, 131, 134, 137, 138, 150, 151, 152, 154, 156, 178, 179], "when": [0, 2, 6, 8, 9, 10, 11, 12, 43, 44, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 79, 81, 83, 84, 85, 86, 88, 91, 95, 99, 100, 101, 111, 112, 115, 122, 130, 131, 134, 136, 137, 139, 140, 145, 177, 178], "": [0, 2, 8, 9, 10, 11, 26, 55, 57, 58, 59, 60, 61, 63, 65, 67, 69, 72, 77, 80, 81, 83, 88, 89, 90, 91, 94, 99, 101, 104, 105, 106, 107, 108, 110, 127, 128, 129, 131, 132, 134, 137, 142, 143, 144, 145, 147, 154, 156, 177, 178, 179], "import": [0, 2, 9, 70], "treat": [0, 65, 67, 75, 76, 122], "variabl": [0, 9, 65, 67], "separ": [0, 74, 80, 89], "each": [0, 2, 7, 8, 10, 63, 65, 66, 70, 75, 76, 80, 83, 89, 134, 177, 178, 179, 181], "sampl": [0, 10, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 66, 80, 89, 104, 105, 107, 108, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 150, 151, 152, 165], "present": [0, 7, 10, 63, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 86, 87, 89, 90, 92, 96, 97, 98, 113, 115, 116, 117, 119, 120, 121, 122, 124, 125, 134, 177], "dure": [0, 3, 68, 69, 77, 78, 79, 81, 82, 87, 90, 118], "fix": [0, 3, 68, 69, 77, 78, 79, 81, 82, 90, 152, 179], "hyperparamet": [0, 2, 65, 67, 80, 89, 174], "meanwhil": [0, 3], "do": [0, 63, 113, 114, 176], "need": [0, 9, 10, 80, 104, 105, 134, 145, 176], "duplic": [0, 63], "instead": [0, 2, 178], "broadcast": [0, 73, 76, 99, 100, 101, 102, 103], "batch": [0, 62, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 113, 114, 115, 122, 134], "some": [0, 2, 3, 10, 132, 154, 156], "paramet": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 165, 166, 177, 179], "mai": [0, 2, 3, 9, 63, 65, 67, 70, 74], "includ": [0, 9, 65, 67, 68, 69, 73, 77, 78, 79, 81, 82, 83, 89, 90, 94, 107, 108, 114, 115, 134, 174], "adapt": [0, 3, 68, 69, 79, 81, 99, 100, 101, 102, 103, 115, 153, 154, 155, 156, 174], "behavior": [0, 10, 65, 66, 67, 68, 69, 79, 80, 81, 104, 105, 115, 174, 177, 178], "base": [0, 6, 7, 8, 9, 10, 11, 13, 14, 24, 27, 28, 29, 30, 31, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 174], "input": [0, 2, 6, 7, 8, 12, 24, 25, 27, 63, 66, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 99, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 148, 149, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 176, 177, 178, 179, 181], "A": [0, 2, 7, 10, 65, 67, 68, 69, 79, 81, 115, 128, 129, 130, 139, 143, 144, 152, 153, 154, 155, 156], "common": [0, 75, 76, 87, 92, 93, 131, 136, 137, 138, 140, 145, 176], "exampl": [0, 7, 70, 102, 103, 179], "an": [0, 2, 3, 7, 8, 9, 10, 11, 15, 18, 21, 24, 32, 35, 38, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 95, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 115, 118, 122, 130, 131, 133, 135, 139, 145, 152, 157, 158, 159, 160, 161, 162, 177, 178, 179, 181], "threshold": [0, 68, 69, 79, 81, 100, 101, 103, 111, 112, 174, 178, 179], "where": [0, 2, 10, 17, 20, 23, 34, 37, 40, 62, 63, 65, 66, 67, 68, 69, 70, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 99, 100, 101, 104, 105, 106, 107, 108, 118, 122, 132, 134, 137, 138, 176, 177, 178, 179, 181], "defin": [0, 2, 80, 89, 178], "minimum": [0, 7, 13, 14, 29, 30, 80, 104, 105, 147], "membran": [0, 3, 68, 69, 71, 77, 78, 79, 81, 82, 87, 90, 99, 100, 101, 109, 110, 111, 112, 115, 116, 119, 177, 178, 179], "which": [0, 2, 3, 7, 8, 9, 10, 11, 25, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 149, 152, 165, 176, 177, 178, 179, 181], "spike": [0, 2, 62, 65, 66, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 87, 89, 90, 92, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 112, 118, 120, 122, 123, 124, 125, 174, 178, 179, 181], "These": [0, 66, 70, 76, 177, 178], "should": [0, 6, 7, 8, 9, 10, 11, 28, 31, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 99, 100, 101, 104, 105, 115, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "share": [0, 63, 65], "across": [0, 63, 65, 68, 69, 70, 77, 79, 81, 82, 84, 85, 86, 90, 109, 110, 177, 178, 179], "all": [0, 2, 10, 12, 62, 63, 64, 65, 70, 83, 84, 86, 88, 94, 95, 104, 105, 106, 107, 108, 127, 128, 130, 131, 134, 135, 137, 142, 143, 147, 153, 154, 178], "contribut": [0, 128, 129, 143, 144], "portion": 0, "updat": [0, 2, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 55, 63, 64, 65, 66, 67, 68, 69, 71, 73, 79, 81, 83, 91, 99, 100, 101, 111, 112, 115, 138, 153, 154, 155, 156, 176], "also": [0, 3, 7, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 63, 65, 67, 68, 69, 73, 74, 79, 81, 83, 84, 85, 86, 91, 106, 115, 154, 156, 178, 179], "appli": [0, 2, 3, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 63, 64, 65, 68, 70, 72, 74, 83, 84, 85, 86, 88, 91, 94, 95, 99, 100, 101, 102, 103, 134, 177, 178, 179, 181], "weight": [0, 2, 65, 66, 67, 73, 74, 84, 85, 86, 96, 97, 98, 176], "bias": [0, 73, 74, 84, 85, 86, 96, 97], "handl": [0, 9, 64], "same": [0, 7, 9, 10, 63, 68, 69, 74, 79, 81, 115, 128, 129, 130, 132, 133, 134, 138, 139, 141, 143, 144, 157, 158, 159, 160, 161, 162, 163, 164, 179], "wai": [0, 2, 6, 9, 145], "can": [0, 2, 3, 8, 9, 10, 63, 64, 65, 67, 68, 69, 75, 76, 79, 81, 83, 91, 115, 131, 136, 137, 140, 145, 176, 178, 179], "done": [0, 99, 100, 101], "either": [0, 7, 10, 66, 70, 96, 101, 122, 131, 177], "reduc": [0, 2, 63, 65, 66, 67, 68, 69, 70, 79, 81, 95, 99, 100, 101, 115, 131, 134, 135, 136, 137, 140, 145], "output": [0, 6, 8, 11, 24, 27, 55, 66, 70, 71, 73, 74, 80, 83, 84, 85, 86, 89, 91, 104, 105, 106, 107, 108, 111, 112, 126, 133, 137, 140, 143, 144, 146, 148, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 176, 179], "along": [0, 7, 10, 65, 67, 68, 69, 70, 74, 77, 78, 79, 81, 82, 88, 90, 99, 100, 101, 114, 127, 134, 138, 147], "dimens": [0, 7, 10, 62, 65, 66, 67, 68, 69, 70, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 115, 127, 134, 147], "The": [0, 2, 3, 7, 10, 11, 28, 31, 62, 63, 64, 65, 66, 67, 70, 71, 74, 75, 76, 80, 83, 89, 91, 95, 102, 103, 104, 105, 107, 108, 120, 124, 131, 133, 134, 136, 138, 140, 143, 144, 145, 150, 152, 154, 156, 177, 179], "former": [0, 177], "more": [0, 3, 7, 65, 67, 68, 69, 75, 76, 77, 78, 79, 81, 82, 90, 95, 99, 100, 101, 174, 177], "effici": [0, 63], "make": [0, 138], "assumpt": 0, "about": [0, 2], "how": [0, 2, 3, 174], "perform": [0, 2, 8, 10, 26, 55, 65, 66, 67, 72, 74, 88, 134, 135, 152, 153, 154, 155, 156, 176], "inferno": [0, 2, 63, 64, 70, 83, 134, 174, 176, 178, 179], "object": [0, 8, 9, 11, 63, 64, 83, 91, 93, 94, 95, 98, 113, 115, 116, 117, 119, 121, 122, 125], "orient": 0, "interfac": 0, "automat": [0, 7, 9, 63, 66, 83, 99, 100, 101, 137], "But": 0, "certain": 0, "case": [0, 2, 17, 20, 23, 34, 37, 40, 45, 52, 60, 67, 68, 69, 75, 76, 77, 78, 79, 81, 82, 88, 90, 118, 127, 129, 137, 139, 144, 154, 155, 156, 176, 181], "function": [0, 6, 8, 9, 11, 25, 43, 44, 63, 64, 65, 67, 68, 69, 70, 72, 75, 76, 79, 81, 88, 91, 92, 94, 95, 99, 100, 101, 111, 112, 115, 122, 126, 131, 133, 134, 136, 137, 140, 143, 144, 145, 149, 150, 151, 152, 154, 156, 165, 176, 181], "might": 0, "necessari": 0, "hand": [0, 131, 134], "detail": [0, 65, 67, 68, 69, 74, 75, 76, 77, 78, 79, 81, 82, 90, 99, 100, 101, 174], "inform": [0, 6, 7, 8, 73, 87, 92, 95, 177], "process": [0, 63, 65, 67, 70, 80, 83, 104, 105], "arxiv": [0, 177], "1909": 0, "02549": 0, "becaus": [0, 63], "over": [0, 2, 10, 63, 65, 66, 67, 68, 69, 74, 79, 84, 85, 86, 106, 115, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 177, 178, 179, 181], "unit": [0, 10, 64, 65, 67, 128, 129, 130, 132, 133, 134, 139, 141, 143, 144, 181], "relev": [0, 11], "comput": [0, 2, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 62, 66, 73, 80, 83, 89, 91, 147, 150, 151, 152], "match": [0, 9, 84, 85, 86, 128, 129, 130, 133, 139, 143, 144, 153, 154, 155, 156], "theoret": 0, "continu": [0, 150], "descript": [0, 174], "specifi": [0, 2, 7, 24, 27, 63, 64, 65, 66, 67, 70, 71, 83, 88, 91, 92, 95, 126, 127, 131, 140, 145, 146, 148, 165, 166], "length": [0, 2, 10, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 128, 129, 130, 132, 133, 134, 135, 139, 141, 143, 144, 176, 177, 178, 179, 181], "given": [0, 7, 9, 10, 62, 63, 65, 66, 67, 70, 71, 83, 89, 91, 92, 107, 108, 111, 112, 134, 135, 137, 138, 142, 150, 151, 152, 174, 177, 178, 181], "millisecond": [0, 68, 69, 73, 75, 76, 77, 78, 79, 80, 81, 82, 87, 90, 92, 117, 128, 129, 130, 134, 139, 143, 144], "On": 0, "step": [0, 3, 10, 26, 28, 41, 42, 43, 44, 45, 46, 47, 48, 55, 62, 63, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 128, 129, 130, 132, 133, 134, 135, 139, 141, 143, 144, 153, 154, 155, 156, 176, 177, 178, 179, 181], "amount": [0, 2, 56, 66, 68, 69, 74, 79, 81, 99, 100, 152], "ha": [0, 9, 63, 65, 68, 69, 73, 74, 79, 81, 83, 84, 85, 86, 91, 115, 118, 120, 122, 124, 131, 134, 137, 142, 145, 179, 181], "elaps": 0, "subtract": [0, 131], "from": [0, 2, 7, 9, 10, 24, 27, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 63, 65, 66, 67, 70, 71, 73, 74, 75, 76, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 95, 96, 97, 98, 104, 105, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 144, 146, 148, 150, 151, 152, 165, 166, 176, 179, 181], "remain": [0, 68, 69, 77, 78, 79, 81, 82, 87, 90, 99, 100, 101, 111, 112, 117, 118, 132, 177], "inclus": [0, 72], "bound": [0, 2, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 72, 75, 76, 101, 122], "zero": [0, 7, 10, 62, 74, 84, 85, 86, 88, 127, 128, 129, 130, 131, 132, 134, 139, 141, 143, 144, 152], "equal": [0, 2, 70, 80, 89, 104, 105, 176], "consid": [0, 2, 10, 26, 55, 65, 128, 129, 130, 133, 134, 137, 139, 142, 143, 144, 152, 153, 154, 155, 156, 176, 178], "out": [0, 2, 10, 41, 42, 43, 44, 45, 46, 47, 48, 74, 75, 76, 122], "its": [0, 2, 7, 9, 10, 63, 64, 70, 71, 73, 80, 83, 95, 104, 105, 131, 176, 179, 181], "therefor": [0, 7], "evenli": 0, "divis": 0, "simualt": [0, 68, 69, 74, 75, 76, 77, 79, 81, 82, 84, 85, 86, 90], "practic": [0, 2], "round": 0, "up": 0, "next": [0, 10, 43, 44, 47, 51, 53, 59, 68, 135], "integ": [0, 3, 10], "multipl": [0, 2, 3, 15, 21, 32, 35, 38, 62, 63, 65, 67, 74, 79, 112, 128, 129, 137, 142, 143, 144], "size": [0, 7, 10, 24, 27, 65, 66, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 113, 114, 122, 126, 146, 165, 166], "affect": [0, 3, 65, 154, 156, 174], "onli": [0, 2, 8, 9, 11, 63, 65, 67, 72, 74, 75, 83, 88, 95, 131], "data": [0, 10, 24, 27, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 65, 67, 73, 74, 84, 85, 86, 115, 116, 119, 126, 127, 128, 129, 130, 132, 133, 134, 135, 139, 141, 143, 144, 146, 147, 148, 165, 166], "pass": [0, 6, 8, 10, 11, 63, 65, 67, 68, 69, 70, 73, 74, 79, 81, 83, 84, 85, 86, 91, 115, 131, 136, 137, 140, 145, 181], "through": [0, 3, 73, 74, 84, 85, 86, 113, 114, 181], "itself": [0, 8, 11, 64, 70, 73], "special": 0, "must": [0, 6, 7, 8, 9, 11, 63, 64, 70, 73, 74, 76, 83, 87, 92, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 133, 134, 135, 137, 138, 140, 143, 144, 154, 156], "load": [0, 9], "principl": 0, "modul": [0, 6, 7, 8, 10, 11, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 136, 137, 138, 140, 145, 158, 160, 162, 164, 174], "record": [0, 10, 131, 134, 136, 137, 140, 142, 145], "e": [0, 2, 6, 7, 9, 10, 25, 62, 63, 64, 83, 89, 106, 107, 108, 134, 150, 151, 152, 179], "g": [0, 9, 62, 63, 64, 83], "synaps": [0, 71, 73, 74, 75, 76, 83, 84, 85, 86, 91, 93, 120, 121, 122, 123, 124, 125], "while": [0, 3, 68, 69, 77, 78, 79, 81, 82, 90, 111, 112, 137], "durat": [0, 10, 128, 129, 130, 132, 133, 134, 135, 139, 141, 142, 143, 144], "chang": [0, 7, 9, 10, 63, 64, 65, 67, 73, 74, 84, 85, 113, 114, 132, 176, 177, 181], "underli": [0, 2, 74, 83, 91, 131, 132, 134, 136, 137, 140, 145, 178, 179], "structur": [0, 70], "note": [0, 9, 65, 176, 178, 181], "properti": [0, 2, 7, 8, 9, 10, 11, 24, 27, 63, 66, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 128, 129, 130, 134, 137, 139, 142, 143, 144, 146, 148, 150, 151, 152, 165, 166, 178], "setter": [0, 68, 69, 75, 76, 79, 81, 86, 115, 120, 124], "modifi": [0, 6, 7, 8, 10, 24, 27, 83, 126, 131, 136, 137, 140, 145, 146, 148, 165, 166], "after": [0, 2, 7, 8, 10, 56, 65, 67, 68, 69, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 90, 92, 94, 96, 97, 98, 99, 100, 101, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 136, 137, 140, 145, 147, 177, 178, 179], "phenomenon": 2, "rate": [2, 42, 50, 58, 65, 66, 67, 79, 80, 89, 101, 104, 105, 107, 108, 152, 176, 177, 178, 179], "quantiti": 2, "decreas": [2, 176, 177], "proport": [2, 66, 177, 178], "current": [2, 3, 10, 11, 26, 55, 65, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 90, 92, 94, 99, 102, 109, 110, 111, 112, 116, 120, 121, 122, 123, 124, 128, 129, 130, 132, 133, 134, 135, 137, 139, 141, 142, 143, 144, 153, 154, 155, 156, 174, 176, 178, 179], "valu": [2, 3, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 55, 57, 58, 62, 66, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 106, 113, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 165, 177, 178, 179, 181], "It": [2, 63, 65, 67, 83, 179], "describ": [2, 174, 176], "differenti": 2, "equat": 2, "tau": [2, 41, 49, 57, 132, 154], "frac": [2, 41, 43, 44, 49, 51, 57, 59, 65, 66, 67, 68, 69, 74, 77, 79, 81, 82, 90, 99, 100, 104, 105, 110, 128, 129, 130, 132, 139, 143, 144, 150, 151, 152, 153, 154, 155, 156, 176, 177, 178, 179], "dn": 2, "dt": [2, 10, 68, 69, 73, 75, 76, 77, 78, 79, 81, 82, 87, 90, 92, 128, 129, 130, 134, 139, 143, 144, 176, 177, 178, 179], "n": [2, 65, 67, 80, 84, 85, 86, 102, 103, 104, 105, 150, 151, 152], "solut": [2, 176, 177, 178], "t": [2, 7, 10, 26, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 99, 100, 101, 104, 105, 106, 109, 110, 111, 112, 118, 128, 129, 130, 132, 139, 143, 144, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 176, 177, 178, 179, 181], "n_0": [2, 10, 62, 66, 80, 84, 85, 86, 89, 99, 100, 101, 104, 105, 106, 107, 108, 122, 134], "0": [2, 10, 17, 20, 23, 34, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 99, 100, 101, 113, 114, 118, 127, 128, 129, 130, 132, 133, 139, 141, 143, 144, 166, 176, 179, 181], "oft": 2, "neural": [2, 63, 70, 83], "network": [2, 63, 83], "simul": [2, 3, 62, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 90, 92, 93, 99, 100, 101, 109, 110, 111, 112, 128, 129, 130, 134, 139, 143, 144, 177, 178, 179, 181], "involv": 2, "discret": [2, 10, 28, 128, 129, 130, 134, 139, 143, 144, 152, 179, 181], "timestep": [2, 68], "those": [2, 63, 68, 70, 73, 91], "thei": [2, 106, 136, 176], "often": [2, 176, 179], "appear": 2, "form": [2, 6, 8, 9], "exp": [2, 41, 42, 49, 50, 57, 58, 65, 66, 67, 68, 69, 77, 79, 82, 100, 109, 128, 129, 130, 132, 139, 143, 144, 150, 151, 153, 154, 155, 156, 176, 177, 178, 179], "left": [2, 41, 42, 43, 44, 49, 50, 51, 57, 58, 65, 66, 67, 68, 69, 74, 77, 79, 81, 82, 86, 90, 99, 100, 101, 109, 110, 112, 128, 129, 130, 131, 132, 134, 139, 143, 144, 150, 151, 153, 154, 155, 156, 176, 177, 178, 179], "right": [2, 41, 42, 43, 44, 49, 50, 51, 57, 58, 65, 66, 67, 68, 69, 74, 77, 79, 81, 82, 86, 90, 99, 100, 101, 109, 110, 112, 128, 129, 130, 131, 132, 134, 139, 143, 144, 150, 151, 153, 154, 155, 156, 176, 177, 178, 179], "wa": [2, 7, 10, 28, 31, 56, 63, 68, 69, 77, 79, 81, 82, 90, 99, 100, 101, 131], "solv": 2, "analyt": 2, "approxim": [2, 69, 77, 81, 90, 99, 101, 106, 110, 176, 177, 179], "via": [2, 7, 63, 64, 83], "euler": [2, 69, 77, 81, 90, 99, 101, 110], "method": [2, 6, 7, 9, 10, 12, 63, 64, 65, 67, 68, 69, 71, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 90, 95, 99, 101, 104, 105, 106, 110, 120, 122, 124, 134, 135, 137, 145], "both": [2, 7, 28, 65, 131], "repres": [2, 7, 73, 76, 87, 92, 114, 118, 179], "select": [2, 10, 52, 53, 54, 60, 61, 65, 67, 92, 122, 134], "model": [2, 3, 177], "term": [2, 65, 67, 101, 176, 178], "long": [2, 176], "live": [2, 7], "correspond": [2, 9, 63, 68, 69, 70, 75, 76, 77, 78, 79, 81, 82, 83, 87, 90, 95, 99, 100, 101, 111, 112, 118, 150, 151], "under": [2, 179], "relat": [2, 134, 174, 179], "ne": 2, "k": [2, 66, 99, 100, 101, 102, 103, 152, 154, 158, 160, 162, 164], "That": 2, "repeat": 2, "applic": [2, 128, 129, 130, 132, 133, 139, 141, 143, 144], "1": [2, 7, 10, 15, 17, 18, 20, 21, 23, 26, 32, 34, 35, 37, 38, 40, 55, 62, 65, 66, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 101, 102, 103, 104, 105, 106, 118, 127, 132, 146, 150, 151, 152, 174, 176, 177, 179, 181], "start": [2, 28, 179], "To": [2, 7, 10, 11, 24, 27, 80, 104, 105, 126, 146, 165, 166, 177, 178], "outsid": [2, 134], "notion": 2, "life": 2, "we": [2, 9], "ln": 2, "b": [2, 55, 65, 66, 73, 74, 80, 84, 85, 86, 89, 99, 100, 101, 104, 105, 106, 107, 108, 122, 131, 145], "want": 2, "think": 2, "let": 2, "tau_b": 2, "Then": 2, "nb": 2, "express": [2, 152], "sometim": [2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40], "lambda": [2, 42, 50, 58, 66, 152, 178], "context": [2, 176, 177], "frequent": 2, "aris": 2, "care": [2, 95], "histori": [2, 10, 65, 67, 128, 129, 130, 132, 133, 134, 135, 139, 141, 143, 144], "activ": [2, 7], "formal": 2, "sum": [2, 65, 66, 67, 68, 69, 70, 79, 81, 115], "previou": [2, 43, 44, 48, 49, 50, 51, 54, 57, 58, 59, 66, 75, 76, 122, 135, 141], "occur": [2, 7, 10, 11, 65, 66, 67, 72, 75, 76, 88, 122, 152, 177, 178, 179, 181], "howev": [2, 63, 65, 145], "purpos": [2, 65, 143, 144], "comparison": 2, "grow": 2, "complex": [2, 25, 26, 27, 55, 88, 127, 128, 129, 130, 139, 143, 144, 148, 149, 153, 154, 155, 156], "quadrat": [2, 81, 90, 110, 174], "respect": [2, 11, 65, 67, 70, 74, 83, 84, 85, 86, 96, 137], "interest": 2, "plausibl": 2, "benefit": 2, "feasibl": 2, "rather": [2, 62, 66, 70, 83, 91, 128, 129, 154, 156, 178], "than": [2, 62, 63, 66, 70, 83, 91, 104, 105, 106, 128, 129, 154, 156, 178, 179], "everi": [2, 63, 65, 67, 80, 83, 104, 105], "prior": [2, 10, 11, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 68, 69, 77, 78, 79, 81, 82, 87, 90, 118, 122, 128, 129, 130, 132, 133, 134, 135, 139, 141, 143, 144, 153, 154, 176], "leav": [2, 178], "tau_x": [2, 128, 129, 130, 139, 143, 144, 153, 154, 155, 156], "dx": 2, "x": [2, 17, 20, 23, 25, 26, 34, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 81, 84, 85, 86, 128, 129, 130, 132, 139, 143, 144, 149, 150, 151, 153, 154, 155, 156, 181], "sum_f": 2, "f": [2, 43, 44, 65, 67, 68, 69, 74, 77, 78, 79, 80, 81, 82, 89, 90, 104, 105, 106, 118, 176], "amplitud": [2, 128, 129, 130, 139, 143, 144, 153, 154, 155, 156], "set": [2, 7, 9, 10, 24, 27, 63, 65, 67, 68, 69, 73, 74, 75, 76, 79, 80, 81, 83, 84, 85, 94, 95, 99, 100, 101, 104, 105, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 139, 141, 143, 144, 146, 153, 155, 165, 166, 176, 178, 179], "construct": [2, 24, 27, 75, 76, 83, 92, 93, 126, 131, 136, 137, 138, 140, 145, 146, 165, 166], "evalu": [2, 7, 8, 11, 63, 68, 69, 79, 81, 136], "otherwis": [2, 9, 45, 52, 60, 68, 69, 73, 75, 76, 77, 78, 79, 80, 81, 82, 89, 90, 94, 118, 140, 154], "interpret": 2, "follow": [2, 3, 6, 8, 73, 89, 107, 108, 122, 132, 134, 150, 151, 178], "whenev": 2, "add": [2, 9, 63, 64, 65, 67, 70, 83, 91, 94, 128, 130, 143, 153, 154, 156], "j": [2, 128, 129, 143, 144, 154, 156], "true": [2, 6, 8, 10, 11, 63, 65, 66, 67, 68, 69, 72, 73, 77, 78, 79, 80, 81, 82, 83, 88, 89, 90, 94, 104, 105, 131, 136, 137, 140, 145, 152, 176], "event": [2, 133, 152], "sum_j": 2, "text": [2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 52, 60, 62, 65, 66, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 122, 123, 150, 151, 152, 154, 176, 177, 178, 179, 181], "m": [2, 62, 65, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 118, 122, 177, 178, 179, 181], "most": [2, 10, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 67, 70, 73, 80, 104, 105, 128, 129, 130, 132, 133, 134, 135, 139, 141, 143, 144, 176, 177], "recent": [2, 10, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 67, 73, 128, 129, 130, 132, 133, 134, 135, 139, 141, 143, 144, 176], "runtim": 2, "cdot": [2, 10, 62, 66, 74, 80, 84, 85, 86, 89, 99, 100, 101, 104, 105, 106, 107, 108, 122, 134, 176], "iverson": [2, 176], "bracket": [2, 176], "inner": [2, 74, 84, 85, 86, 176], "statement": [2, 176], "fals": [2, 7, 10, 11, 62, 63, 65, 66, 67, 72, 73, 74, 75, 76, 80, 83, 84, 85, 86, 88, 89, 91, 96, 97, 98, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 131, 134, 136, 140, 145, 176], "begin": [2, 17, 20, 23, 26, 34, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 55, 60, 65, 67, 68, 69, 74, 75, 76, 77, 78, 79, 81, 82, 90, 118, 129, 132, 139, 144, 154, 155, 156, 176, 177, 178, 179, 181], "neq": [2, 67, 181], "end": [2, 17, 20, 23, 26, 28, 34, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 55, 60, 62, 65, 67, 68, 69, 74, 75, 76, 77, 78, 79, 81, 82, 90, 118, 129, 132, 139, 144, 145, 154, 155, 156, 176, 177, 178, 179, 181], "further": [2, 6, 8], "new": [2, 7, 9, 10, 63, 66, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 96, 97, 98, 113, 115, 116, 117, 119, 120, 121, 124, 125, 128, 129, 130, 134, 139, 143, 144, 153, 154, 155, 156], "observ": [2, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 71, 75, 76, 122, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 141, 142, 143, 144, 145, 150, 151, 153, 154, 155, 156], "h": [2, 74, 128, 129, 130, 139, 143, 144, 153, 154, 155, 156], "meet": 2, "criterion": [2, 128, 129, 133, 143, 144], "ad": [2, 7, 10, 63, 70, 74, 80, 83, 88, 91, 95, 96, 97, 98, 104, 105, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 134], "so": [2, 9, 63, 65, 132, 181], "mid": [2, 150, 151, 152], "f_a": 2, "tradition": 2, "connect": [2, 70, 71, 74, 83, 84, 85, 86, 91, 92, 93, 96, 97, 98, 176], "especi": [2, 70], "learn": [2, 65, 66, 67, 68, 69, 73, 74, 79, 81, 84, 85, 86], "contain": [2, 9, 31, 55, 111, 112], "depress": [2, 15, 16, 17, 18, 19, 20, 32, 33, 34, 35, 36, 37, 65, 67, 176, 177], "compon": [2, 154, 156, 177, 178], "techniqu": 2, "limit": [2, 9, 13, 14, 15, 16, 17, 21, 22, 23, 29, 30, 32, 33, 34, 38, 39, 40, 65, 67, 68, 69, 75, 76, 79, 81, 115, 122], "rang": [2, 10, 72, 134], "align": [2, 10, 26, 41, 42, 43, 44, 45, 46, 47, 48, 55, 65, 68, 69, 74, 79, 81, 132, 176, 177, 178, 179], "a_": [2, 176], "v": 2, "v_": [2, 68, 69, 77, 79, 81, 82, 90, 99, 101, 109, 110, 111, 112, 177, 178, 179], "max": [2, 13, 18, 19, 20, 21, 22, 23, 29, 35, 36, 37, 38, 39, 40, 65, 67, 68, 69, 70, 72, 79, 81, 101, 115, 147, 177], "mu_": [2, 16, 19, 22, 33, 36, 39], "eta_": [2, 65, 67], "min": [2, 13, 15, 16, 17, 18, 19, 20, 29, 32, 33, 34, 35, 36, 37, 70, 72, 147], "adjust": [2, 43, 44, 176], "magnitud": [2, 65, 176, 177], "ltp": [2, 65, 67, 176], "ltd": [2, 65, 67, 176], "being": [2, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 66, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 83, 89, 90, 91, 104, 105, 106, 107, 108, 114, 131, 136, 137, 140, 145], "upper": [2, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 72], "lower": [2, 13, 14, 15, 16, 17, 18, 19, 20, 29, 30, 32, 33, 34, 35, 36, 37, 72, 101, 177], "origin": [2, 65, 67, 68, 69, 79, 81, 115, 134], "order": [2, 7, 9, 10, 64, 70, 88, 127, 134], "penal": 2, "penalti": 2, "control": [2, 65, 67, 79, 81, 90, 110, 112, 179], "refer": [2, 6, 7, 9, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 65, 67, 68, 69, 74, 75, 76, 77, 78, 79, 81, 82, 90, 95, 99, 100, 101, 137, 174], "power": [2, 15, 16, 18, 21, 22, 32, 33, 35, 36, 38, 39], "law": 2, "theta": [2, 17, 20, 23, 34, 37, 40, 68, 79, 111, 112, 177, 178, 179], "nonneg": [2, 104, 105, 106, 107, 108], "filter": [2, 74, 131, 136, 140, 145], "ani": [2, 3, 6, 8, 9, 10, 11, 12, 63, 64, 65, 67, 71, 73, 76, 83, 86, 91, 96, 97, 131, 134, 135, 136, 137, 140, 145, 178, 179, 181], "would": [2, 7, 10, 11], "move": [2, 64, 132], "beyond": 2, "hold": 2, "int_": 2, "infti": [2, 68, 79, 103, 177, 178, 179], "neg": [2, 7, 13, 18, 19, 20, 29, 35, 36, 37, 129, 144, 156], "argument": [2, 6, 8, 11, 63, 65, 66, 67, 70, 71, 73, 74, 83, 84, 85, 86, 91, 128, 129, 131, 134, 135, 137, 142, 145, 150, 151, 152], "posit": [2, 7, 13, 29, 62, 71, 83, 135], "geq": [2, 17, 20, 23, 34, 37, 40, 111, 112], "deriv": [2, 120, 122, 124, 150, 179], "d": [2, 10, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 122, 134, 177, 178], "And": [2, 74], "integr": [2, 68, 69, 77, 78, 79, 82, 87, 90, 92, 109, 110, 154, 156, 174, 181], "have": [3, 7, 62, 63, 71, 74, 83, 84, 85, 133, 134, 143, 144, 154, 156], "two": [3, 7, 28, 31, 56, 65, 70, 73, 74, 177, 179], "kind": 3, "absolut": [3, 68, 69, 77, 78, 79, 81, 82, 90, 99, 100, 101, 109, 110, 111, 112, 118, 130, 139, 153, 155], "arp": [3, 68, 69, 77, 78, 79, 81, 82, 90, 118], "rel": [3, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 71, 128, 129, 130, 132, 133, 135, 139, 141, 143, 144, 150, 151], "rrp": 3, "cannot": [3, 7, 9, 10, 71, 113, 114, 177], "presynapt": [3, 65, 67, 68, 69, 75, 76, 77, 78, 79, 81, 82, 90, 102, 109, 110, 111, 112, 176, 177, 178, 181], "doe": [3, 7, 9, 10, 63, 70, 83, 91, 120, 124, 134, 152, 181], "depolar": [3, 179], "repolar": 3, "hyperpolar": 3, "mean": [3, 65, 67, 68, 69, 70, 79, 115, 131, 136, 137, 140, 145, 150, 151, 152], "difficult": 3, "fire": [3, 68, 69, 77, 78, 79, 82, 90, 103, 174, 176, 177], "imposs": 3, "time": [3, 7, 10, 11, 26, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 174, 177, 178, 179, 181], "voltag": [3, 68, 69, 71, 77, 78, 79, 81, 82, 87, 90, 99, 100, 101, 103, 109, 110, 111, 112, 119, 174, 178, 179], "reset": [3, 10, 68, 69, 73, 75, 76, 77, 78, 79, 81, 82, 87, 90, 92, 101, 111, 112, 134, 177, 178, 179], "determin": [3, 12, 24, 27, 63, 74, 84, 85, 86, 107, 126, 130, 139, 146, 148, 165, 166], "strongli": 3, "constant": [3, 41, 42, 49, 50, 57, 58, 65, 67, 68, 69, 77, 79, 81, 82, 90, 99, 100, 101, 109, 110, 128, 129, 130, 132, 139, 143, 144, 176, 177, 178, 179], "wherea": [3, 7, 10, 63], "other": [3, 9, 66, 70, 72, 83, 88, 91, 131, 136, 140, 145, 178], "parameter": [3, 41, 42, 49, 50, 89, 107, 108, 176], "class": [6, 7, 8, 9, 10, 11, 13, 14, 28, 29, 30, 31, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 150, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164], "prehook": [6, 8, 11, 131, 136, 137, 140, 145], "str": [6, 7, 8, 9, 10, 63, 64, 65, 67, 70, 71, 72, 73, 83, 87, 88, 91, 92, 94, 95, 131, 137, 138, 145, 150, 151, 152], "none": [6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 24, 26, 27, 29, 35, 36, 37, 43, 44, 55, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 111, 112, 115, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 165, 166], "posthook": [6, 8, 131, 136, 137, 140, 145], "prehook_kwarg": [6, 8, 137], "dict": [6, 7, 8, 9, 64, 70, 71, 83, 91, 137, 150, 151, 152], "posthook_kwarg": [6, 8, 137], "train_upd": [6, 8, 11, 72, 88, 131, 136, 137, 140, 145], "bool": [6, 7, 8, 10, 11, 24, 27, 62, 63, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 96, 97, 98, 104, 105, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 133, 134, 136, 137, 139, 140, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 165, 166], "eval_upd": [6, 8, 11, 72, 88, 131, 136, 137, 140, 145], "sourc": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "hook": [6, 11, 63, 72, 83, 88, 131, 137, 145], "provid": [6, 8, 9, 70, 91, 147], "forward": [6, 8, 11, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 131, 134, 136, 137, 140, 142, 145], "subclass": [6, 11, 63, 64, 65, 73, 83, 87, 92, 94, 135, 137], "manag": [6, 8, 95, 111, 112, 113, 114, 122], "safe": [6, 8, 83], "garbag": 6, "collector": 6, "without": [6, 10, 64, 137, 142, 154, 156, 177, 178, 179], "cyclic": 6, "option": [6, 7, 8, 10, 11, 24, 27, 43, 44, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 101, 104, 105, 106, 107, 108, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 165, 166], "name": [6, 7, 9, 10, 63, 64, 65, 67, 70, 71, 72, 83, 88, 91, 95, 118, 120, 122, 124, 137, 145, 150, 151, 152], "execut": [6, 11, 137], "default": [6, 7, 8, 10, 11, 12, 24, 27, 43, 44, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 111, 112, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 165, 166], "keyword": [6, 8, 63, 65, 67, 70, 71, 73, 74, 83, 84, 85, 86, 91, 137], "register_forward_pre_hook": [6, 8, 137], "register_forward_hook": [6, 8, 137], "run": [6, 8, 11, 68, 69, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 87, 88, 90, 92, 131], "train": [6, 8, 11, 62, 63, 64, 65, 68, 69, 71, 72, 79, 80, 81, 88, 89, 104, 105, 106, 107, 108, 131, 136, 137, 140, 145, 174], "mode": [6, 8, 11, 63, 65, 67, 68, 69, 72, 75, 76, 79, 81, 87, 88, 131, 136, 137, 140, 145], "eval": [6, 8, 11, 72, 88, 131, 136, 137, 140, 145], "rais": [6, 7, 8, 9, 10, 11, 25, 63, 64, 70, 71, 73, 83, 87, 91, 92, 94, 135, 137, 177], "runtimeerror": [6, 7, 8, 10, 63, 70, 71, 83, 91, 94, 137], "least": [6, 7, 8, 70], "one": [6, 8, 63, 65, 67, 68, 69, 70, 79, 81, 83, 85, 86, 91, 115, 159, 160, 161, 162, 163, 164, 177], "If": [6, 7, 8, 10, 12, 62, 63, 64, 65, 66, 68, 69, 70, 73, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 94, 96, 99, 100, 101, 104, 105, 115, 131, 136, 137, 138, 140, 142], "signatur": [6, 8, 75, 76, 92, 131, 136, 137, 140, 145], "arg": [6, 8, 9, 13, 14, 28, 29, 30, 31, 56, 70, 91, 92, 93, 135, 137, 138, 142, 157, 158, 159, 160, 161, 162, 163, 164], "Or": [6, 8], "with_kwarg": [6, 8], "kwarg": [6, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 131, 134, 137, 138, 142, 157, 158, 159, 160, 161, 162, 163, 164], "see": [6, 8, 65, 67, 95, 126, 137, 165, 178, 179], "constraint": [7, 10, 113, 114, 134], "tupl": [7, 12, 24, 27, 28, 41, 42, 43, 44, 45, 46, 47, 48, 55, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 111, 112, 114, 115, 126, 127, 131, 134, 136, 140, 145, 146, 147, 150, 151, 165, 166], "int": [7, 10, 24, 25, 26, 27, 55, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 104, 105, 107, 108, 113, 114, 115, 126, 127, 128, 129, 130, 139, 143, 144, 146, 147, 148, 149, 153, 154, 155, 156, 165, 166], "support": [7, 10, 74, 75, 76, 84, 85, 86, 92, 93, 176], "dimension": [7, 74], "constrain": [7, 10, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "buffer": [7, 9, 10, 113, 122], "dim": [7, 10, 68, 69, 77, 78, 79, 81, 82, 87, 88, 90, 92, 93, 113, 114, 127, 147], "attribut": [7, 9, 10, 63, 66, 71, 72, 75, 76, 83, 88, 94, 95, 114, 115, 118, 122, 131, 138, 145, 179], "valueerror": [7, 10, 63, 70, 83, 91], "persist": 7, "dictionari": [7, 9, 10, 64, 70, 83, 91], "themselv": 7, "uniqu": [7, 63, 70, 71], "element": [7, 10, 12, 65, 66, 68, 69, 70, 74, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 90, 91, 104, 105, 106, 107, 108, 114, 127, 128, 129, 130, 133, 139, 143, 144, 153, 154, 155, 156], "For": [7, 65, 67, 68, 69, 75, 76, 77, 78, 79, 81, 82, 83, 90, 99, 100, 101, 102, 103, 128, 129, 130, 131, 132, 139, 143, 144, 145, 176], "place": [7, 64, 83], "tensor": [7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 165, 166], "three": [7, 70], "sinc": [7, 31, 80, 104, 105, 133], "scalar": [7, 10, 12, 24, 27, 126, 146, 150, 151, 152, 165, 166], "ignor": [7, 8, 11, 131, 136, 140, 145], "compat": [7, 9, 10], "test": [7, 63, 130, 131, 133, 136, 139, 140, 143, 144, 145, 150, 151, 152, 154, 156], "torch": [7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 165, 166], "return": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "type": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "classmethod": [7, 75, 76, 92, 131, 136, 137, 140, 145, 150, 151, 152], "compatible_": 7, "compatible_lik": 7, "iter": [7, 63, 70, 80, 83, 89, 105, 108], "creat": [7, 10, 63, 70, 74, 75, 76, 83, 84, 85, 91, 95, 96, 97, 98, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125], "shape": [7, 24, 27, 28, 31, 68, 69, 75, 76, 77, 78, 79, 81, 82, 87, 90, 92, 93, 114, 115, 126, 146, 148, 165, 166], "like": [7, 9, 10, 24, 27, 28, 31, 65, 67, 68, 69, 73, 74, 79, 81, 84, 85, 86, 92, 115, 126, 146, 148, 165, 166, 174], "nn": [7, 9, 11, 63, 64, 72, 88], "_description_": [7, 10, 106], "compatible_like_": 7, "suffici": 7, "made": [7, 9, 95, 134], "sort": 7, "result": [7, 10, 28, 31, 66, 70, 73, 74, 91, 128, 129, 130, 132, 133, 134, 139, 141, 143, 144, 150, 151, 152], "first": [7, 10, 28, 62, 70, 75, 76, 83, 91, 102, 103, 104, 106, 107, 178], "last": [7, 10, 62, 65, 67, 68, 69, 71, 73, 77, 78, 79, 81, 82, 87, 90, 99, 100, 101, 118, 133, 134, 135, 137, 181], "increas": [7, 68, 69, 77, 79, 81, 90, 99, 100, 110, 176, 177, 179], "deregister_constrain": [7, 10], "deregist": [7, 8, 10, 63], "isn": [7, 10], "call": [7, 8, 9, 10, 11, 63, 64, 65, 67, 71, 72, 73, 83, 88, 91, 96, 97, 98, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 134, 136, 137, 140, 142, 145, 152, 176, 178, 179], "noth": [7, 10, 120, 124], "fulli": [7, 9, 10, 72, 88], "qualifi": [7, 9, 10, 72, 88], "string": [7, 9, 10, 70, 72, 88], "regist": [7, 8, 9, 10, 11, 63, 64, 72, 73, 74, 83, 84, 85, 88, 91, 96, 97, 98, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 131, 136, 137, 138, 140, 145], "number": [7, 10, 25, 62, 63, 66, 68, 69, 70, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 95, 99, 100, 101, 104, 105, 106, 107, 108, 114, 122, 126, 134, 149, 150, 151, 152, 157, 158, 159, 160, 161, 162, 165], "requir": [7, 9, 24, 27, 62, 64, 65, 67, 71, 74, 96, 97, 98, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 134, 146, 148, 154, 156, 165, 166], "dims_": 7, "extra_repr": [7, 73, 87, 92], "extra": [7, 9, 63, 73, 87, 92], "represent": [7, 83], "print": 7, "custom": [7, 65, 67, 68, 69, 70, 79, 81, 115], "you": [7, 9], "re": 7, "implement": [7, 9, 11, 63, 64, 65, 68, 69, 70, 73, 77, 81, 83, 87, 90, 91, 92, 94, 99, 101, 110, 111, 112, 135, 137, 174, 177, 178], "your": [7, 9], "own": [7, 63, 64, 71], "singl": [7, 11, 31, 64, 70, 91, 140], "line": 7, "multi": 7, "accept": [7, 71, 134], "liveconstrain": [7, 10], "enforc": [7, 9, 134], "assign": [7, 9, 66, 68, 69, 75, 76, 79, 81, 86, 115], "reconstrain": [7, 10], "exist": [7, 9, 10, 62, 63, 66, 68, 70, 83, 91, 94, 95, 134, 137, 176], "ahead": [7, 10], "realloc": [7, 10], "remov": [7, 10, 63], "longer": [7, 10, 137], "valid": [7, 9, 10, 70, 73, 83, 91, 95, 137, 150, 151, 152], "self": [7, 10, 63, 71, 134], "register_constrain": [7, 10], "invalid": [7, 9, 10, 65, 67, 95], "attributeerror": [7, 9, 10, 63, 70, 83, 91], "get_paramet": [7, 10], "point": [7, 62, 80, 104, 105, 152, 179], "callabl": [8, 12, 13, 14, 28, 29, 30, 31, 43, 44, 56, 65, 67, 68, 69, 70, 79, 81, 95, 115, 131, 134, 136, 140, 145, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164], "removablehandl": 8, "befor": [8, 9, 10, 43, 44, 65, 67, 70, 72, 74, 86, 88, 91, 122, 131, 134, 135, 136, 140, 145, 147, 177, 179], "still": [8, 63, 74, 80, 95, 104, 105, 130, 139, 153, 155], "evalexec": 8, "pytorch": [8, 9, 65, 67, 68, 69, 79, 81, 115, 152], "typeerror": [8, 9], "instanc": [8, 9, 63, 73, 94, 131, 145, 176], "warn": 8, "runtimewarn": 8, "alreadi": [8, 63, 70, 83, 91, 140, 145], "registr": [8, 83], "trainexec": 8, "extens": 9, "similar": [9, 65, 67, 68, 69, 79, 81, 115, 154, 156], "regular": 9, "enabl": 9, "simpl": [9, 26, 102, 103], "export": 9, "exact": [9, 10, 133], "kei": [9, 83], "insert": [9, 10, 70], "addition": [9, 177], "check": [9, 154, 156], "__setattr__": 9, "__init__": 9, "parent": [9, 95], "child": 9, "constructor": [9, 63, 65, 67, 74, 75, 76, 84, 85, 86, 92, 93, 96, 97, 98, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 136, 137, 138, 140, 145], "get_extra": 9, "target": [9, 10, 83, 130, 131, 136, 137, 138, 139, 140, 145, 150, 151, 153, 155], "throw": 9, "error": [9, 70, 83, 91], "similarli": 9, "specif": [9, 73, 94, 150, 179], "get_submodul": 9, "look": 9, "referenc": [9, 71, 137], "path": [9, 63, 138], "termin": 9, "resolv": [9, 63], "someth": 9, "get_extra_st": 9, "state_dict": 9, "set_extra_st": 9, "store": [9, 10, 65, 66, 67, 86, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145], "build": 9, "picklabl": 9, "ensur": 9, "work": [9, 140, 174], "serial": 9, "backward": 9, "guarante": [9, 63], "break": 9, "pickl": 9, "register_extra": 9, "manner": [9, 135], "register_buff": 9, "except": [9, 11, 70, 72, 88, 128, 129, 154, 156, 176, 178], "access": [9, 83, 91], "keyerror": 9, "empti": [9, 128, 129, 130, 132, 133, 135, 136, 139, 141, 143, 144], "dot": [9, 63, 71, 131, 145], "notat": [9, 131, 145], "python": [9, 70], "identifi": [9, 70, 71], "load_state_dict": 9, "within": [9, 10], "step_tim": [10, 28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 129, 130, 132, 133, 134, 135, 139, 141, 142, 143, 144, 179], "float": [10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 127, 128, 129, 130, 132, 133, 134, 135, 139, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], "dimensionalmodul": [10, 87, 113, 114, 116, 117, 118, 119], "index": [10, 73, 134], "restor": 10, "pointer": 10, "slice": [10, 80, 89, 105, 108], "overwrit": 10, "preserv": [10, 68, 69, 79, 81, 134], "latest_first": 10, "offset": [10, 71, 73], "full": [10, 148], "nativ": 10, "storag": [10, 134], "latest": [10, 26, 55, 129, 139, 144, 153, 154, 155, 156], "roll": 10, "By": [10, 131], "zeroth": 10, "window": 10, "locat": [10, 150, 151], "oper": [10, 74, 131, 135], "overwritten": 10, "retriev": [10, 63, 122, 134], "increment": 10, "write": 10, "recordsz": 10, "interp": [10, 134], "interpol": [10, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 75, 76, 122, 128, 129, 130, 132, 133, 134, 135, 139, 141, 143, 144], "toler": [10, 122, 130, 134, 139, 153, 154, 155, 156], "1e": [10, 88, 127, 134], "07": [10, 134, 177], "ever": 10, "attempt": [10, 68, 69, 79, 81, 115], "regardless": [10, 11, 63], "maximum": [10, 13, 14, 29, 30, 62, 65, 66, 67, 74, 75, 76, 80, 84, 85, 86, 89, 92, 93, 106, 122, 134, 147], "co": [10, 65, 67, 75, 76, 122], "7": [10, 134], "ldot": [10, 62, 66, 80, 84, 85, 86, 89, 99, 100, 101, 104, 105, 106, 107, 108, 134], "mimic": 10, "gather": [10, 66, 134], "thrown": 10, "avoid": [10, 91, 95], "clamp": [10, 63, 83, 106], "as_prehook": [11, 72, 88, 145], "prepend": [11, 72, 88, 131, 136, 140, 145], "always_cal": [11, 72, 88], "contextualhook": [11, 137], "abc": [11, 64, 73, 83, 87, 92, 94, 135, 142], "interact": 11, "act": 11, "previous": [11, 72, 88, 134], "even": [11, 63, 65, 67, 70, 72, 83, 88, 91, 131, 145], "trigger": [11, 177, 178, 179], "here": [11, 28, 31, 63, 174], "ignore_mod": 11, "unregist": 11, "normal": [11, 66, 72, 147, 150, 181], "prevent": 11, "manual": [11, 91, 113, 114], "configur": 11, "abstract": [11, 64, 73, 83, 87, 92, 94, 135, 142], "notimplementederror": [11, 63, 64, 73, 83, 87, 92, 135, 137], "convers": 12, "convert": 12, "non": [12, 150, 151, 152], "leftmost": 12, "unspecifi": [12, 70], "protocol": [13, 14, 28, 29, 30, 31, 56, 93, 138, 157, 158, 159, 160, 161, 162, 163, 164], "param": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 94, 95], "po": [13, 18, 19, 20, 29, 35, 36, 37], "part": [13, 29], "scale": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 65, 66, 67, 80, 88, 89, 107, 108, 127, 128, 129, 143, 144, 150, 151, 154, 156, 176], "partial": [14, 30, 63, 74, 75, 76, 84, 85, 86, 92, 131, 136, 137, 140, 145], "depend": [15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 64, 65, 67, 68, 73, 100, 101, 103, 113, 114, 140, 174, 178], "soft": [15, 16, 18, 19, 21, 22, 32, 33, 35, 36, 38, 39], "equival": [15, 18, 21, 32, 35, 38, 128, 129, 134, 176, 178], "expon": [15, 16, 18, 19, 21, 22, 32, 33, 35, 36, 38, 39], "u_": [15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40], "p": [15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 88, 127, 150, 151, 152, 176], "p_": [15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40], "sharp": [17, 23, 34, 37, 40, 69, 77, 179], "hard": [17, 20, 23, 34, 37, 40], "u": [18, 19, 20, 35, 36, 37], "upper_pow": [19, 36], "lower_pow": [19, 36], "dtype": [24, 27, 126, 133, 143, 144, 146, 148, 150, 151, 152, 165, 166], "layout": [24, 27, 126, 146, 148, 165, 166], "devic": [24, 27, 64, 126, 146, 148, 165, 166], "requires_grad": [24, 27, 96, 97, 98, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 146, 148, 165, 166], "uniniti": 24, "overrid": [24, 27, 63, 65, 66, 67, 126, 146, 148, 165, 166], "gradient": [24, 27, 96, 97, 98, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 146, 148, 165, 166], "ndarrai": [25, 149], "agnost": [25, 149], "exponenti": [25, 26, 41, 42, 49, 50, 55, 57, 58, 65, 67, 68, 69, 77, 79, 80, 81, 82, 90, 99, 100, 101, 104, 105, 109, 110, 128, 129, 130, 132, 139, 143, 144, 153, 154, 155, 156, 174, 177], "y": [25, 84, 85, 86, 149, 178], "numpi": [25, 149], "ob": [26, 55, 128, 129, 130, 132, 133, 139, 141, 143, 144], "level": [26, 55], "alpha": [26, 55, 132], "smooth": [26, 55, 132], "s_0": [26, 55, 132], "x_0": [26, 55, 132], "s_": [26, 55, 132], "x_": [26, 55, 65, 67, 132, 154, 176], "s_t": [26, 55, 132], "factor": [26, 55, 132, 179], "revis": [26, 55], "fill": [27, 126, 128, 129, 130, 132, 133, 135, 139, 141, 143, 144, 146, 148, 165, 166], "prev_data": [28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 128, 129, 130, 132, 133, 135, 139, 141, 143, 144], "next_data": [28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 128, 129, 130, 132, 133, 135, 139, 141, 143, 144], "sample_at": [28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 128, 129, 130, 132, 133, 135, 139, 141, 143, 144], "nearest": [28, 31, 52, 65, 67, 75, 76, 129, 134, 139, 144], "total": [28, 31, 66, 177, 178, 179, 181], "2": [28, 45, 74, 79, 150, 151, 152, 174, 179], "second": [28, 70, 83, 91, 128, 129, 178], "subsequ": [28, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 76, 128, 129, 130, 132, 133, 135, 139, 141, 143, 144], "time_const": [41, 49, 57, 77, 78, 82, 90, 99, 100, 109, 110, 128, 129, 130, 139, 143, 144], "extrapol": [41, 42, 43, 44, 45, 46, 47, 48], "assum": [41, 42, 65, 67, 68, 69, 70, 73, 79, 81, 91, 115, 131], "decai": [41, 42, 49, 50, 57, 58, 65, 66, 67, 68, 69, 77, 79, 81, 82, 90, 99, 100, 101, 109, 110, 128, 129, 130, 139, 143, 144, 153, 154, 155, 156, 177, 178], "dynam": [41, 42, 68, 69, 75, 76, 77, 78, 79, 81, 82, 87, 90, 92, 95, 109, 110, 111, 112, 177, 178, 179], "t_": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 68, 69, 77, 78, 79, 81, 82, 90, 118, 176], "delta": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 67, 68, 69, 75, 76, 77, 79, 80, 81, 82, 89, 90, 99, 100, 101, 104, 105, 106, 109, 110, 128, 129, 130, 132, 139, 143, 144, 153, 154, 155, 156, 174, 176, 177, 178, 179], "neighbor": [41, 42, 43, 44, 45, 46, 47, 48, 176], "rate_const": [42, 50, 58], "linearli": [43, 44, 80, 89], "ident": [43, 44, 70, 91, 136], "closest": 45, "leq": [45, 130, 139, 150, 151, 152, 153, 155], "linearlli": [51, 59], "trend": 55, "beta": 55, "holt": 55, "linear": [55, 68, 84, 85, 86, 99, 100, 101, 102, 103, 109, 132, 174, 179], "b_0": 55, "x_1": 55, "b_": 55, "b_t": 55, "measur": [56, 134], "d_": [57, 58, 59, 60, 61, 176], "time_first": 62, "transform": [62, 70, 84, 85, 86, 91], "inter": [62, 64, 80, 104, 105, 122], "interv": [62, 74, 80, 84, 85, 86, 89, 104, 105, 107, 108], "pad": [62, 70, 74], "nan": 62, "could": 62, "fewer": 62, "final": [62, 70, 134, 135], "calcul": [62, 65, 66, 67, 75, 76, 131, 135, 176, 178], "interspik": 62, "c": [62, 70, 74], "popul": 62, "etc": [62, 83], "amongst": [62, 63], "trainer": [63, 64, 65], "layer": [63, 64, 65, 67, 70, 71, 91], "monitor": [63, 64, 65, 67, 71, 83, 131, 136, 138, 140, 145, 177], "alter": [63, 64, 74, 84, 85, 134], "likewis": [63, 64, 176], "add_cel": [63, 70, 83, 91], "auxiliari": [63, 64, 65, 67], "add_monitor": 63, "attr": [63, 71, 72, 73, 88, 131, 138, 145], "monitorconstructor": [63, 131, 136, 137, 140, 145], "tag": 63, "trainabl": [63, 64, 65, 67, 73, 95], "seper": [63, 71], "alias": 63, "pool": [63, 71], "off": [63, 118], "bypass": 63, "less": [63, 104, 105], "cours": 63, "delet": [63, 65, 70, 73, 83, 91, 94, 95], "yield": [63, 80, 83, 89, 105, 108], "clear": [63, 65, 68, 69, 73, 75, 76, 77, 78, 79, 81, 82, 83, 87, 90, 92, 94, 95, 131, 134, 137, 142], "addit": [63, 65, 73, 74, 79, 80, 84, 85, 86, 94, 104, 105, 112, 154, 156, 177, 178], "overridden": [63, 65, 67, 137, 142], "well": [63, 65, 97, 174], "doesn": [63, 65, 70, 83, 91, 99, 100, 101], "del_cel": [63, 70, 83, 91], "strictli": [63, 152], "again": [63, 70], "associ": [63, 64, 80, 83, 89, 94], "del_monitor": 63, "get_cel": [63, 83], "get": [63, 64, 80, 83, 104, 105], "get_monitor": 63, "togeth": [63, 176], "possibl": [63, 66, 134], "named_cel": [63, 83], "named_monitor": 63, "named_monitors_of": 63, "associt": 63, "put": 63, "cumul": [63, 65, 67, 83, 128, 130, 143, 150, 151, 152, 176], "onc": 63, "celltrain": 64, "moduledict": 64, "register_cel": [64, 65, 67], "alongsid": 64, "lr_post": [65, 67], "lr_pre": [65, 67], "tc_post": [65, 67], "tc_pre": [65, 67], "tc_elig": 65, "delai": [65, 67, 71, 73, 74, 75, 76, 84, 85, 86, 92, 93, 96, 122, 174], "interp_toler": [65, 67], "batch_reduct": [65, 67, 68, 69, 79, 81, 115], "field_reduct": [65, 67], "independenttrain": [65, 67], "plastic": [65, 67, 174], "elig": [65, 174], "trace": [65, 67, 128, 129, 130, 139, 143, 144, 153, 154, 155, 156, 174], "w": [65, 67, 74, 84, 85, 86, 176], "gamma": [65, 152, 176], "r": [65, 150, 151, 152, 176, 178], "z_": 65, "post": [65, 67, 73, 74, 84, 85, 86, 131, 176], "pre": [65, 67, 73, 74, 84, 85, 86, 131, 176], "tau_z": [65, 176], "tau_": [65, 67, 176], "t_n": [65, 67, 176], "sign": [65, 67], "expand": [65, 74], "reinforc": 65, "split": 65, "sgn": [65, 67], "hebbian": [65, 67, 174], "anti": [65, 67, 176], "postsynapt": [65, 67, 68, 69, 73, 77, 78, 79, 81, 82, 87, 90, 99, 100, 101, 118, 176, 177], "trace_mod": [65, 67], "liter": [65, 67, 70, 75, 76], "recept": [65, 67], "field": [65, 67, 178, 179], "desir": [65, 67, 88, 127, 145, 150, 151], "expect": [65, 67, 74, 80, 83, 84, 85, 86, 89, 104, 105, 106, 107, 108, 134, 140, 150, 151, 152], "basi": [65, 67], "keep": [65, 67, 68, 69, 79, 81, 115], "visit": [65, 67, 68, 69, 75, 76, 77, 78, 79, 81, 82, 90, 99, 100, 101, 102, 103], "zoo": [65, 67, 68, 69, 75, 76, 77, 78, 79, 81, 82, 90, 99, 100, 101, 102, 103], "reward": [65, 176], "initi": [65, 67, 71, 74, 80, 84, 85, 86, 87, 89, 95, 96, 97, 98, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 128, 129, 130, 132, 133, 134, 135, 139, 141, 142, 143, 144], "num_class": 66, "classifi": 66, "per": [66, 74, 122], "intern": [66, 75, 76, 86, 114], "multipli": [66, 154, 156, 178], "them": [66, 70, 118, 131, 136, 137, 140, 145, 174], "b_k": [66, 69, 81, 99, 101, 177, 179], "group": [66, 68, 69, 70, 73, 75, 76, 77, 78, 79, 81, 82, 87, 90, 91, 92, 93, 99, 100, 101, 114], "decay_r": 66, "logit": 66, "label": 66, "infer": 66, "ground": 66, "truth": 66, "predict": 66, "were": [66, 70], "averag": [66, 99, 100, 101, 132], "nclass": 66, "ndim": 66, "exclud": [66, 68, 69, 73, 74, 77, 78, 79, 81, 82, 84, 85, 86, 87, 90, 92, 93, 114], "l_1": 66, "raw": 66, "recalcul": 66, "bigl": 67, "f_": [67, 68, 69, 77, 78, 79, 81, 82, 90, 118, 154, 176], "bigr": 67, "x_n": 67, "tau_n": 67, "rest_v": [68, 69, 77, 78, 79, 81, 82, 90, 99, 101, 109, 110, 112], "reset_v": [68, 69, 77, 78, 81, 82, 90, 111], "thresh_eq_v": [68, 79, 179], "refrac_t": [68, 69, 77, 78, 79, 81, 82, 90, 111, 112, 118], "tc_membran": [68, 69, 79, 81], "tc_adapt": [68, 69, 81], "spike_incr": [68, 69, 79, 81, 99, 100], "resist": [68, 69, 77, 78, 79, 81, 82, 90, 109, 110, 178], "batch_siz": [68, 69, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 90, 92, 93, 113, 114], "adaptationmixin": [68, 69, 79, 81], "voltagemixin": [68, 69, 77, 78, 79, 81, 82, 90], "spikerefractorymixin": [68, 69, 77, 78, 79, 81, 82, 90], "leaki": [68, 78, 79, 82, 174], "v_m": [68, 69, 77, 79, 81, 82, 90, 99, 101, 109, 110, 111, 112, 177, 178, 179], "rest": [68, 69, 75, 76, 77, 78, 79, 81, 82, 87, 90, 92, 99, 101, 109, 110, 112, 177, 178, 179], "r_mi": [68, 69, 77, 79, 81, 82, 90, 109, 110, 178, 179], "tau_m": [68, 69, 77, 79, 81, 82, 90, 109, 110, 178, 179], "theta_": [68, 79, 101, 103, 177, 178, 179], "sum_k": [68, 69, 79, 81, 177, 178, 179], "theta_k": [68, 79, 100, 101, 103, 177, 178], "tau_k": [68, 69, 81, 99, 100, 177, 178, 179], "leftarrow": [68, 69, 77, 79, 81, 82, 90, 99, 100, 101, 111, 112, 177, 178, 179], "d_k": [68, 79, 81, 177, 178, 179], "equilibrium": [68, 69, 77, 79, 81, 82, 90, 99, 101, 103, 109, 110, 112, 177, 178, 179], "mv": [68, 69, 77, 79, 81, 82, 90, 99, 100, 101, 103, 109, 110, 111, 112, 119, 177, 178, 179], "refractori": [68, 69, 77, 78, 79, 80, 81, 82, 87, 90, 99, 100, 101, 104, 105, 109, 110, 111, 112, 117, 118], "period": [68, 69, 77, 78, 79, 80, 81, 82, 87, 90, 99, 100, 101, 104, 105, 109, 110, 111, 112, 117, 118], "r_m": [68, 69, 77, 79, 81, 82, 90, 109, 110, 178], "omega": [68, 69, 77, 79, 81, 82, 90, 109, 110, 178], "keep_adapt": [68, 69, 79, 81], "refrac_lock": [68, 69, 77, 78, 79, 81, 82, 90], "na": [68, 69, 77, 78, 79, 81, 82, 90, 99, 102, 109, 110, 111, 112, 116, 120, 121, 123, 177, 178, 179, 181], "additon": [68, 69, 79, 81, 115], "lead": [68, 69, 79, 81, 115], "unreduc": [68, 69, 79, 81, 115], "batchedshap": [68, 69, 77, 78, 79, 81, 82, 90, 114], "batchsz": [68, 69, 73, 77, 78, 79, 81, 82, 87, 90, 113, 114], "count": [68, 69, 77, 78, 79, 81, 82, 90, 114, 130, 139, 152, 153, 155], "replic": [68, 69, 77, 78, 79, 81, 82, 89, 90, 107, 108, 114], "refrac": [68, 69, 77, 78, 79, 80, 81, 82, 87, 90, 99, 100, 101, 104, 105, 111, 112, 117, 118], "millivolt": [68, 69, 71, 77, 78, 79, 81, 82, 87, 90, 119], "rheobase_v": [69, 77], "thresh_v": [69, 77, 78, 81, 82, 90, 111, 112, 179], "voltage_coupl": [69, 81, 99], "delta_t": [69, 77, 179], "v_t": [69, 77, 179], "i_x": [69, 76, 81, 177, 179, 181], "w_k": [69, 81, 99, 102, 177, 179], "a_k": [69, 99, 100, 101, 177, 179], "approach": [69, 77, 179], "rapidli": [69, 77], "steep": [69, 77, 179], "natur": [69, 77, 81, 90, 110, 150, 151, 152], "abov": [69, 77, 177, 179], "rheobas": [69, 77, 179], "strength": [69, 81, 90, 99, 110], "coupl": [69, 81, 99, 177, 179], "mu": [69, 81, 99, 150, 151, 177, 178, 179], "onetoon": [70, 74, 84, 85, 86, 91, 111, 112, 133, 134, 143, 144], "combin": 70, "stack": 70, "prod": [70, 84, 85, 86], "complet": 70, "bipartit": 70, "graph": 70, "third": 70, "take": [70, 106, 120, 124, 140, 149, 157, 158, 159, 160, 161, 162, 163, 164], "reshap": [70, 73, 74, 84, 85, 86], "einop": 70, "produc": [70, 71], "receiv": [70, 91, 136, 176], "ouput": 70, "__call__": [70, 83], "captur": [70, 91], "py": [70, 73, 74, 83, 84, 85, 86, 91], "meth": [70, 73, 74, 84, 85, 86, 91], "specifyi": [70, 83, 91], "add_connect": [70, 83, 91], "add_neuron": [70, 83, 91], "hasn": [70, 83, 91], "been": [70, 83, 91, 134], "pair": [70, 71, 83, 91], "del_connect": [70, 83, 91], "del_neuron": [70, 83, 91], "wire": [70, 83, 91, 176], "logic": [70, 83, 91, 111, 112, 134, 154, 156], "topologi": [70, 91], "submodul": [71, 138], "compos": [71, 73, 131], "local_remap": 71, "local": 71, "remap": 71, "alia": [71, 78], "callback": 71, "realign": 71, "postspik": 71, "postvoltag": 71, "precurr": 71, "syncurr": [71, 73], "synapt": [71, 73, 74, 75, 76, 84, 85, 86, 92, 120, 121, 122, 123, 124], "prespik": 71, "synspik": [71, 73], "statehook": [72, 88], "batched_inshap": 73, "batched_outshap": [73, 84, 85, 86], "bia": [73, 74, 84, 85, 86, 96, 97], "learnabl": [73, 74, 84, 85, 86, 96, 97, 98], "clearabl": 73, "defaultupdat": [73, 94], "exclude_weight": 73, "exclude_bia": 73, "exclude_delai": 73, "delayedbi": 73, "newli": [73, 93, 138], "maxmimum": 73, "inshap": [73, 74, 84, 85, 86], "insiz": 73, "cach": 73, "refresh": 73, "like_input": [73, 74, 84, 85, 86], "like_synapt": [73, 74, 84, 85, 86], "outshap": [73, 74, 84, 85, 86], "outsiz": 73, "postsyn_recept": [73, 74, 84, 85, 86], "l": 73, "presyn_recept": [73, 74, 84, 85, 86], "selector": [73, 74, 75, 76, 84, 85, 86, 92, 122], "height": 74, "width": 74, "channel": 74, "kernel": 74, "stride": 74, "dilat": 74, "synapseconstructor": [74, 75, 76, 84, 85, 86, 92], "weight_init": [74, 84, 85, 86], "bias_init": [74, 84, 85, 86], "delay_init": [74, 84, 85, 86], "weightbiasdelaymixin": [74, 84, 85, 86], "convolut": 74, "spatial": 74, "plane": 74, "kh": 74, "kw": 74, "delay_": [74, 84, 85, 96], "effect": [74, 84, 85, 177, 179], "unless": [74, 84, 85, 137, 142], "later": [74, 84, 85], "uniform": [74, 84, 85, 86], "random": [74, 84, 85, 86, 126, 150, 151, 152, 165], "rand": [74, 84, 85, 86, 165], "anoth": [74, 122], "h_": 74, "w_": 74, "formula": 74, "document": 74, "lfloor": [74, 152], "p_h": 74, "d_h": 74, "k_h": 74, "s_h": 74, "rfloor": [74, 152], "p_w": 74, "d_w": 74, "k_w": 74, "s_w": 74, "ph": 74, "pw": 74, "side": [74, 178], "dh": 74, "dw": [74, 176], "sh": [74, 128, 129, 143, 144, 154, 156], "sw": 74, "reli": 74, "upon": [74, 179], "consequenti": 74, "memori": 74, "spike_q": [75, 76], "interp_mod": [75, 76], "interp_tol": [75, 76], "current_overbound": [75, 76], "spike_overbound": [75, 76], "delayedspikecurrentaccessormixin": [75, 76], "spikederivedcurrentmixin": 75, "memoryless": [75, 76], "respond": [75, 76, 177], "instantan": [75, 76], "q": [75, 76, 181], "charg": [75, 76, 181], "carri": [75, 76, 181], "pc": [75, 76, 181], "replac": [75, 76, 122], "cuba": [75, 76, 174], "variant": [75, 76, 174], "getter": [75, 76], "recordmodul": [75, 76, 92, 120, 121, 122, 123, 124, 125, 142], "partialconstructor": [75, 76, 92, 131, 136, 137, 140, 145], "spikecurrentmixin": 76, "passthrough": [76, 141], "inject": 76, "glif": [78, 79, 174, 177, 178], "lif": [78, 174], "reset_v_add": 79, "reset_v_mul": 79, "rc_adapt": 79, "lambda_k": [79, 178], "m_v": [79, 112, 178], "b_v": [79, 112, 178], "unitless": [79, 81, 90, 110, 112, 153, 154, 155, 156, 179], "frequenc": [80, 89, 104, 105, 106, 107, 108, 177], "compens": [80, 104, 105, 152], "generatormixin": [80, 89], "refractorystepmixin": 80, "encod": [80, 89], "poisson": [80, 89, 104, 105, 106, 107, 108], "distribut": [80, 89, 104, 105, 106, 107, 108, 150, 151, 152], "randomli": [80, 104, 105], "hz": [80, 89, 104, 105, 106, 107, 108], "pseudorandom": [80, 89, 104, 105, 107, 108, 126, 150, 151, 152, 165], "allow": [80, 104, 105, 130, 134, 139, 153, 155, 177], "distanc": [80, 104, 105], "th": [80, 99, 100, 101, 104, 105], "onlin": [80, 89], "intens": [80, 89], "hertz": [80, 89], "pin": 80, "crit_v": [81, 90, 110], "affin": [81, 90, 110], "crit": [81, 90, 110, 179], "drift": [81, 90, 110], "toward": [81, 90, 110, 178, 179], "awai": [81, 90, 110, 179], "simultan": 83, "proxi": 83, "connection_nam": [83, 91], "neuron_nam": [83, 91], "neither": 83, "nor": 83, "reassign": 83, "primarili": 83, "connection_kwarg": [83, 91], "neuron_kwarg": [83, 91], "capture_intermedi": [83, 91], "turn": [83, 131, 145], "unpack": [83, 134, 136], "get_connect": 83, "get_neuron": 83, "named_connect": 83, "named_neuron": 83, "named_synaps": 83, "accumul": [83, 94, 95], "in_shap": 84, "out_shap": 84, "interc": [84, 86], "m_0": 84, "unbatch": [84, 85, 86], "odot": [85, 86], "inputoutput": [85, 86], "i_n": 86, "lineardens": 86, "creation": 86, "mask": [86, 109, 110, 154, 156], "shapemixin": [87, 92], "epsilon": [88, 127, 130, 139, 153, 155], "12": [88, 127, 177], "norm": [88, 127], "demonin": [88, 127], "stepmixin": 89, "bindsnet": [89, 107, 108], "invers": [89, 107, 108, 178, 181], "wrap": [91, 131, 140, 145], "serial_c": 91, "serial_n": 91, "conveni": 91, "nanoamper": [92, 116, 121, 122, 124], "current_at": [92, 122], "spike_at": [92, 122], "boolean": 92, "updatesom": 94, "reduct": 95, "taken": 95, "collis": 95, "although": [95, 152, 176, 179], "small": 95, "_get_": 95, "_set_": 95, "_del_": 95, "weakli": 95, "weightbiasmixin": 96, "mixin": [96, 97, 98, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "inherit": [96, 97, 98, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "weight_": [96, 97, 98], "bias_": [96, 97], "weightmixin": 97, "maintain": [99, 100, 101, 111, 112], "adapt_r": 101, "rebound_r": 101, "adapt_reset_min": 101, "permit": [101, 154, 156], "adap": [102, 103], "i_": 102, "optioon": [104, 105], "nonsens": [104, 105], "1000": [104, 105], "inhomogen": 106, "exce": 106, "greater": 106, "masked_input": [109, 110], "held": [111, 112], "v_slope": 112, "v_intercept": 112, "batchmixin": 114, "concept": 114, "__shape": 114, "adaptation_": 115, "adapt_batchreduc": 115, "current_": [116, 120, 121, 122, 123], "refrac_": [117, 118], "refractorymixin": 118, "driven": 119, "voltage_": 119, "currentmixin": [120, 123], "therefrom": [120, 124], "_to_spik": [120, 122], "primit": [121, 123, 125], "primitive_curr": 122, "primitive_spik": 122, "current_interp": 122, "spike_interp": 122, "current_overv": 122, "spike_overv": 122, "_to_curr": [122, 124], "spike_": [122, 123, 124, 125], "alwai": 122, "_current_interp": 122, "_spike_interp": 122, "_current_ob_v": 122, "_spike_ob_v": 122, "_primitive_curr": 122, "_primitive_spik": 122, "_interp_tol": 122, "spikemixin": [123, 124], "randn": 126, "foldingreduc": [128, 129, 130, 132, 133, 139, 141, 143, 144], "condit": [128, 129, 153, 154, 155, 156, 179], "lvert": [128, 130, 139, 143, 153, 154, 155], "scaledcumulativetracereduc": 128, "fold": [128, 129, 130, 132, 133, 135, 139, 141, 143, 144], "cond": [128, 129], "incorpor": [128, 129, 130, 132, 133, 134, 135, 139, 141, 142, 143, 144, 153, 154, 155, 156, 178, 179], "entir": [128, 129, 130, 132, 133, 139, 141, 143, 144], "scalednearesttracereduc": 129, "rvert": [130, 139, 153, 155], "filter_": [131, 136, 140, 145], "map_": [131, 136, 140, 145], "op_": 131, "nest": [131, 138, 145], "map": [131, 134, 136, 140, 145], "minu": 131, "op": 131, "ti": [131, 145], "reject": 131, "compar": 131, "reiniti": [131, 134, 137, 142], "decoupl": 132, "datatyp": [133, 143, 144, 154, 156], "infin": 133, "fold_fn": 134, "just": 134, "whatev": 134, "situat": 134, "keepshap": 134, "histor": 134, "dump": [134, 137, 142], "tempor": 134, "oldest": 134, "push": [134, 142], "peek": [134, 137, 142], "view": [134, 137, 142], "fail": 134, "fall": 134, "foldreduc": 135, "step_data": 135, "sent": 136, "0th": 136, "directli": [137, 141], "weak": 137, "did": 137, "sens": 138, "sensibl": 138, "reduer": [140, 145], "resmin": 147, "resmax": 147, "srcmin": 147, "srcmax": 147, "unchang": 147, "amin": 147, "amax": 147, "shortcut": 148, "squar": 149, "root": 149, "continuousdistribut": [150, 151], "log": [150, 151, 152], "probabl": [150, 151, 152], "mathbb": [150, 151, 152], "sigma": [150, 151], "_": [150, 151, 152, 176], "cdf": [150, 151, 152], "loc": [150, 151], "erf": [150, 151], "sqrt": [150, 151], "standard": [150, 151], "deviat": [150, 151], "logcdf": [150, 151, 152], "logarithm": [150, 151, 152], "logpdf": [150, 151], "densiti": [150, 151], "pi": [150, 151], "likelihood": [150, 151], "sim": [150, 151, 152], "params_mv": [150, 151], "varianc": [150, 151, 152], "mu_x": [150, 151], "sigma_x": [150, 151], "qquad": [150, 151], "pdf": [150, 151], "variat": [150, 151, 152], "mathcal": [150, 151, 176], "sample_mv": [150, 151], "var": [150, 151, 152], "lnormal": 151, "discretedistribut": 152, "_0": 152, "logpmf": 152, "mass": 152, "pmf": 152, "metal": 152, "shader": 152, "accordingli": 152, "degener": 152, "init": [153, 154, 155, 156], "matchfn": [154, 156], "trace_cumul": 154, "predic": [154, 156], "sf": 154, "x_t": 154, "trace_nearest": 156, "arbitrari": [157, 158, 159, 160, 161, 162], "uniformli": 165, "depth": 174, "academ": 174, "plan": 174, "futur": 174, "alif": 174, "3": [174, 179], "4": [174, 177, 179], "5": [174, 179], "nonlinear": 174, "qif": 174, "izhikevich": 174, "eif": 174, "adex": 174, "conduct": [174, 178], "coba": 174, "stdp": 174, "mstdp": 174, "mstdpet": 174, "triplet": 174, "resum": 174, "tbd": 175, "summar": 176, "afterward": 176, "causal": 176, "phrase": [176, 178], "revers": 176, "direct": 176, "below": [176, 177, 179], "written": 176, "commonli": 176, "sum_": 176, "With": [176, 177, 178, 179], "dirac": [176, 181], "w_t": 176, "pp": 176, "xi": 176, "phi_": 176, "dp": 176, "phi_n": 176, "_n": 176, "zeta": 176, "10": [176, 177, 178, 179], "1162": [176, 177], "neco": [176, 177], "2007": 176, "19": 176, "6": [176, 177, 179], "1468": 176, "z": 176, "dz": 176, "impos": 177, "regard": 177, "impli": 177, "steadi": 177, "give": 177, "degre": 177, "freedom": 177, "modif": 177, "dampen": 177, "amplifi": 177, "said": 177, "latter": [177, 179], "goe": 177, "dw_k": [177, 179], "approx": [177, 179], "subthreshold": [177, 179], "doi": [177, 178, 179], "1017": [177, 178, 179], "cbo9781107447615": [177, 178, 179], "1152": 177, "jn": 177, "00686": 177, "2005": 177, "Be": [177, 178], "1038": [177, 178], "s41467": [177, 178], "017": [177, 178], "02717": [177, 178], "allen": [177, 178], "institut": [177, 178], "whitepap": [177, 178], "rebound": 177, "2008": 177, "680": 177, "neco_a_00196": 177, "1803": 177, "09574": 177, "021": 177, "24427": 177, "8": [177, 179], "00234": 177, "2019": 177, "dv_m": [178, 179], "basic": 178, "rule": 178, "back": 178, "slope": [178, 179], "show": [178, 179], "v_r": [178, 179], "60": [178, 179], "plot": [178, 179], "c_m": 178, "g_l": 178, "capacit": 178, "nf": 178, "leak": 178, "expos": 178, "isbn": [178, 179, 181], "9780262548083": [178, 179, 181], "020": 178, "17236": 178, "fraction": 178, "intercept": 178, "convent": 178, "conting": 178, "reach": 178, "critic": 179, "tendenc": 179, "stabl": 179, "unstabl": 179, "attract": 179, "repel": 179, "v_c": 179, "50": 179, "depeend": 179, "3390": 179, "brainsci12070863": 179, "7551": 179, "mitpress": 179, "2526": 179, "001": 179, "0001": 179, "close": 179, "rapid": 179, "upsw": 179, "rightarrow": 179, "easi": 179, "confus": 179, "unrel": 179, "occasion": 179, "denot": 179, "vartheta_": 179, "rh": 179, "thresh": 179, "usual": 179, "simuat": 179, "illustr": 179, "4249": 179, "scholarpedia": 179, "8427": 179, "1523": 179, "jneurosci": 179, "23": 179, "37": 179, "11628": 179, "2003": 179, "t_f": 181, "extern": 181, "veri": 181, "role": 181, "deliv": 181, "dramat": 181}, "objects": {"inferno": [[6, 0, 1, "", "ContextualHook"], [7, 0, 1, "", "DimensionalModule"], [8, 0, 1, "", "Hook"], [9, 0, 1, "", "Module"], [10, 0, 1, "", "RecordModule"], [11, 0, 1, "", "StateHook"], [12, 3, 1, "", "astensors"], [24, 3, 1, "", "empty"], [25, 3, 1, "", "exp"], [26, 3, 1, "", "exponential_smoothing"], [27, 3, 1, "", "full"], [5, 4, 0, "-", "functional"], [55, 3, 1, "", "holt_linear_smoothing"], [62, 3, 1, "", "isi"], [169, 4, 0, "-", "learn"], [170, 4, 0, "-", "neural"], [126, 3, 1, "", "normal"], [127, 3, 1, "", "normalize"], [146, 3, 1, "", "ones"], [147, 3, 1, "", "rescale"], [148, 3, 1, "", "scalar"], [149, 3, 1, "", "sqrt"], [173, 4, 0, "-", "stats"], [153, 3, 1, "", "trace_cumulative"], [154, 3, 1, "", "trace_cumulative_scaled"], [155, 3, 1, "", "trace_nearest"], [156, 3, 1, "", "trace_nearest_scaled"], [165, 3, 1, "", "uniform"], [166, 3, 1, "", "zeros"]], "inferno.DimensionalModule": [[7, 1, 1, "", "compatible"], [7, 1, 1, "", "compatible_"], [7, 1, 1, "", "compatible_like"], [7, 1, 1, "", "compatible_like_"], [7, 2, 1, "", "constraints"], [7, 1, 1, "", "deregister_constrained"], [7, 2, 1, "", "dims"], [7, 1, 1, "", "dims_"], [7, 1, 1, "", "extra_repr"], [7, 2, 1, "", "liveconstrain"], [7, 1, 1, "", "reconstrain"], [7, 1, 1, "", "register_constrained"], [7, 1, 1, "", "validate"]], "inferno.Hook": [[8, 1, 1, "", "deregister"], [8, 2, 1, "", "evalexec"], [8, 1, 1, "", "register"], [8, 2, 1, "", "registered"], [8, 2, 1, "", "trainexec"]], "inferno.Module": [[9, 1, 1, "", "get_extra"], [9, 1, 1, "", "get_extra_state"], [9, 1, 1, "", "register_extra"], [9, 1, 1, "", "set_extra_state"]], "inferno.RecordModule": [[10, 1, 1, "", "aligned"], [10, 1, 1, "", "deregister_constrained"], [10, 2, 1, "", "dt"], [10, 2, 1, "", "duration"], [10, 1, 1, "", "latest"], [10, 1, 1, "", "reconstrain"], [10, 1, 1, "", "record"], [10, 2, 1, "", "recordsz"], [10, 1, 1, "", "register_constrained"], [10, 1, 1, "", "reset"], [10, 1, 1, "", "select"]], "inferno.StateHook": [[11, 1, 1, "", "forward"], [11, 1, 1, "", "hook"], [11, 2, 1, "", "module"], [11, 1, 1, "", "register"]], "inferno.bounding": [[13, 0, 1, "", "FullBounding"], [14, 0, 1, "", "HalfBounding"], [15, 3, 1, "", "lower_multiplicative"], [16, 3, 1, "", "lower_power"], [17, 3, 1, "", "lower_sharp"], [18, 3, 1, "", "multiplicative"], [19, 3, 1, "", "power"], [20, 3, 1, "", "sharp"], [21, 3, 1, "", "upper_multiplicative"], [22, 3, 1, "", "upper_power"], [23, 3, 1, "", "upper_sharp"]], "inferno.functional": [[28, 0, 1, "", "Extrapolation"], [29, 0, 1, "", "FullBounding"], [30, 0, 1, "", "HalfBounding"], [31, 0, 1, "", "Interpolation"], [32, 3, 1, "", "bound_lower_multiplicative"], [33, 3, 1, "", "bound_lower_power"], [34, 3, 1, "", "bound_lower_sharp"], [35, 3, 1, "", "bound_multiplicative"], [36, 3, 1, "", "bound_power"], [37, 3, 1, "", "bound_sharp"], [38, 3, 1, "", "bound_upper_multiplicative"], [39, 3, 1, "", "bound_upper_power"], [40, 3, 1, "", "bound_upper_sharp"], [41, 3, 1, "", "extrap_expdecay"], [42, 3, 1, "", "extrap_expratedecay"], [43, 3, 1, "", "extrap_linear_backward"], [44, 3, 1, "", "extrap_linear_forward"], [45, 3, 1, "", "extrap_nearest"], [46, 3, 1, "", "extrap_neighbors"], [47, 3, 1, "", "extrap_next"], [48, 3, 1, "", "extrap_previous"], [49, 3, 1, "", "interp_expdecay"], [50, 3, 1, "", "interp_expratedecay"], [51, 3, 1, "", "interp_linear"], [52, 3, 1, "", "interp_nearest"], [53, 3, 1, "", "interp_next"], [54, 3, 1, "", "interp_previous"]], "inferno.interpolation": [[56, 0, 1, "", "Interpolation"], [57, 3, 1, "", "expdecay"], [58, 3, 1, "", "expratedecay"], [59, 3, 1, "", "linear"], [60, 3, 1, "", "nearest"], [61, 3, 1, "", "previous"]], "inferno.learn": [[63, 0, 1, "", "CellTrainer"], [64, 0, 1, "", "IndependentTrainer"], [65, 0, 1, "", "MSTDPET"], [66, 0, 1, "", "MaxRateClassifier"], [67, 0, 1, "", "STDP"]], "inferno.learn.CellTrainer": [[63, 1, 1, "", "add_cell"], [63, 1, 1, "", "add_monitor"], [63, 2, 1, "", "cells"], [63, 1, 1, "", "clear"], [63, 1, 1, "", "del_cell"], [63, 1, 1, "", "del_monitor"], [63, 1, 1, "", "forward"], [63, 1, 1, "", "get_cell"], [63, 1, 1, "", "get_monitor"], [63, 2, 1, "", "monitors"], [63, 2, 1, "", "named_cells"], [63, 2, 1, "", "named_monitors"], [63, 1, 1, "", "named_monitors_of"], [63, 1, 1, "", "train"], [63, 1, 1, "", "update"]], "inferno.learn.IndependentTrainer": [[64, 0, 1, "", "Unit"], [64, 1, 1, "", "register_cell"], [64, 1, 1, "", "unit"]], "inferno.learn.IndependentTrainer.Unit": [[64, 5, 1, "", "cell"], [64, 5, 1, "", "monitors"], [64, 5, 1, "", "state"]], "inferno.learn.MSTDPET": [[65, 1, 1, "", "clear"], [65, 1, 1, "", "forward"], [65, 1, 1, "", "register_cell"]], "inferno.learn.MaxRateClassifier": [[66, 2, 1, "", "assignments"], [66, 1, 1, "", "forward"], [66, 1, 1, "", "infer"], [66, 1, 1, "", "learn"], [66, 2, 1, "", "nclass"], [66, 2, 1, "", "ndim"], [66, 2, 1, "", "occurances"], [66, 2, 1, "", "proportional"], [66, 2, 1, "", "proportions"], [66, 2, 1, "", "rates"], [66, 2, 1, "", "shape"]], "inferno.learn.STDP": [[67, 1, 1, "", "forward"], [67, 1, 1, "", "register_cell"]], "inferno.neural": [[68, 0, 1, "", "ALIF"], [69, 0, 1, "", "AdEx"], [70, 0, 1, "", "Biclique"], [71, 0, 1, "", "Cell"], [72, 0, 1, "", "Clamping"], [73, 0, 1, "", "Connection"], [74, 0, 1, "", "Conv2D"], [75, 0, 1, "", "DeltaCurrent"], [76, 0, 1, "", "DeltaPlusCurrent"], [77, 0, 1, "", "EIF"], [78, 0, 1, "", "GLIF1"], [79, 0, 1, "", "GLIF2"], [80, 0, 1, "", "HomogeneousPoissonEncoder"], [81, 0, 1, "", "Izhikevich"], [82, 0, 1, "", "LIF"], [83, 0, 1, "", "Layer"], [84, 0, 1, "", "LinearDense"], [85, 0, 1, "", "LinearDirect"], [86, 0, 1, "", "LinearLateral"], [87, 0, 1, "", "Neuron"], [88, 0, 1, "", "Normalization"], [89, 0, 1, "", "PoissonIntervalEncoder"], [90, 0, 1, "", "QIF"], [91, 0, 1, "", "Serial"], [92, 0, 1, "", "Synapse"], [93, 0, 1, "", "SynapseConstructor"], [94, 0, 1, "", "Updatable"], [95, 0, 1, "", "Updater"], [171, 4, 0, "-", "functional"]], "inferno.neural.ALIF": [[68, 2, 1, "", "adaptation"], [68, 2, 1, "", "batchedshape"], [68, 2, 1, "", "batchsz"], [68, 1, 1, "", "clear"], [68, 2, 1, "", "count"], [68, 2, 1, "", "dt"], [68, 1, 1, "", "forward"], [68, 2, 1, "", "refrac"], [68, 2, 1, "", "shape"], [68, 2, 1, "", "spike"], [68, 2, 1, "", "voltage"]], "inferno.neural.AdEx": [[69, 2, 1, "", "adaptation"], [69, 2, 1, "", "batchedshape"], [69, 2, 1, "", "batchsz"], [69, 1, 1, "", "clear"], [69, 2, 1, "", "count"], [69, 2, 1, "", "dt"], [69, 1, 1, "", "forward"], [69, 2, 1, "", "refrac"], [69, 2, 1, "", "shape"], [69, 2, 1, "", "spike"], [69, 2, 1, "", "voltage"]], "inferno.neural.Biclique": [[70, 1, 1, "", "add_cell"], [70, 1, 1, "", "add_connection"], [70, 1, 1, "", "add_neuron"], [70, 1, 1, "", "del_cell"], [70, 1, 1, "", "del_connection"], [70, 1, 1, "", "del_neuron"], [70, 1, 1, "", "wiring"]], "inferno.neural.Cell": [[71, 2, 1, "", "connection"], [71, 1, 1, "", "forward"], [71, 1, 1, "", "local_remap"], [71, 2, 1, "", "neuron"], [71, 2, 1, "", "postspike"], [71, 2, 1, "", "postvoltage"], [71, 2, 1, "", "precurrent"], [71, 2, 1, "", "prespike"], [71, 2, 1, "", "synapse"], [71, 2, 1, "", "updater"]], "inferno.neural.Clamping": [[72, 1, 1, "", "hook"]], "inferno.neural.Connection": [[73, 2, 1, "", "batched_inshape"], [73, 2, 1, "", "batched_outshape"], [73, 2, 1, "", "batchsz"], [73, 2, 1, "", "bias"], [73, 2, 1, "", "biased"], [73, 1, 1, "", "clear"], [73, 1, 1, "", "defaultupdater"], [73, 2, 1, "", "delay"], [73, 2, 1, "", "delayedby"], [73, 2, 1, "", "dt"], [73, 1, 1, "", "extra_repr"], [73, 1, 1, "", "forward"], [73, 2, 1, "", "inshape"], [73, 1, 1, "", "insize"], [73, 1, 1, "", "like_input"], [73, 1, 1, "", "like_synaptic"], [73, 2, 1, "", "outshape"], [73, 1, 1, "", "outsize"], [73, 1, 1, "", "postsyn_receptive"], [73, 1, 1, "", "presyn_receptive"], [73, 2, 1, "", "selector"], [73, 2, 1, "", "synapse"], [73, 2, 1, "", "syncurrent"], [73, 2, 1, "", "synspike"], [73, 2, 1, "", "weight"]], "inferno.neural.Conv2D": [[74, 1, 1, "", "forward"], [74, 2, 1, "", "inshape"], [74, 1, 1, "", "like_input"], [74, 1, 1, "", "like_synaptic"], [74, 2, 1, "", "outshape"], [74, 1, 1, "", "postsyn_receptive"], [74, 1, 1, "", "presyn_receptive"], [74, 2, 1, "", "selector"]], "inferno.neural.DeltaCurrent": [[75, 1, 1, "", "clear"], [75, 2, 1, "", "dt"], [75, 1, 1, "", "forward"], [75, 1, 1, "", "partialconstructor"]], "inferno.neural.DeltaPlusCurrent": [[76, 1, 1, "", "clear"], [76, 2, 1, "", "dt"], [76, 1, 1, "", "forward"], [76, 1, 1, "", "partialconstructor"]], "inferno.neural.EIF": [[77, 2, 1, "", "batchedshape"], [77, 2, 1, "", "batchsz"], [77, 1, 1, "", "clear"], [77, 2, 1, "", "count"], [77, 2, 1, "", "dt"], [77, 1, 1, "", "forward"], [77, 2, 1, "", "refrac"], [77, 2, 1, "", "shape"], [77, 2, 1, "", "spike"], [77, 2, 1, "", "voltage"]], "inferno.neural.GLIF1": [[78, 2, 1, "", "batchedshape"], [78, 2, 1, "", "batchsz"], [78, 1, 1, "", "clear"], [78, 2, 1, "", "count"], [78, 2, 1, "", "dt"], [78, 1, 1, "", "forward"], [78, 2, 1, "", "refrac"], [78, 2, 1, "", "shape"], [78, 2, 1, "", "spike"], [78, 2, 1, "", "voltage"]], "inferno.neural.GLIF2": [[79, 2, 1, "", "adaptation"], [79, 2, 1, "", "batchedshape"], [79, 2, 1, "", "batchsz"], [79, 1, 1, "", "clear"], [79, 2, 1, "", "count"], [79, 2, 1, "", "dt"], [79, 1, 1, "", "forward"], [79, 2, 1, "", "refrac"], [79, 2, 1, "", "shape"], [79, 2, 1, "", "spike"], [79, 2, 1, "", "voltage"]], "inferno.neural.HomogeneousPoissonEncoder": [[80, 2, 1, "", "compensated"], [80, 1, 1, "", "forward"], [80, 2, 1, "", "frequency"], [80, 2, 1, "", "refrac"]], "inferno.neural.Izhikevich": [[81, 2, 1, "", "adaptation"], [81, 2, 1, "", "batchedshape"], [81, 2, 1, "", "batchsz"], [81, 1, 1, "", "clear"], [81, 2, 1, "", "count"], [81, 2, 1, "", "dt"], [81, 1, 1, "", "forward"], [81, 2, 1, "", "refrac"], [81, 2, 1, "", "shape"], [81, 2, 1, "", "spike"], [81, 2, 1, "", "voltage"]], "inferno.neural.LIF": [[82, 2, 1, "", "batchedshape"], [82, 2, 1, "", "batchsz"], [82, 1, 1, "", "clear"], [82, 2, 1, "", "count"], [82, 2, 1, "", "dt"], [82, 1, 1, "", "forward"], [82, 2, 1, "", "refrac"], [82, 2, 1, "", "shape"], [82, 2, 1, "", "spike"], [82, 2, 1, "", "voltage"]], "inferno.neural.Layer": [[83, 1, 1, "", "add_cell"], [83, 1, 1, "", "add_connection"], [83, 1, 1, "", "add_neuron"], [83, 2, 1, "", "cells"], [83, 2, 1, "", "connections"], [83, 1, 1, "", "del_cell"], [83, 1, 1, "", "del_connection"], [83, 1, 1, "", "del_neuron"], [83, 1, 1, "", "forward"], [83, 1, 1, "", "get_cell"], [83, 1, 1, "", "get_connection"], [83, 1, 1, "", "get_neuron"], [83, 2, 1, "", "named_cells"], [83, 2, 1, "", "named_connections"], [83, 2, 1, "", "named_neurons"], [83, 2, 1, "", "named_synapses"], [83, 2, 1, "", "neurons"], [83, 1, 1, "", "update"], [83, 1, 1, "", "wiring"]], "inferno.neural.LinearDense": [[84, 1, 1, "", "forward"], [84, 2, 1, "", "inshape"], [84, 1, 1, "", "like_input"], [84, 1, 1, "", "like_synaptic"], [84, 2, 1, "", "outshape"], [84, 1, 1, "", "postsyn_receptive"], [84, 1, 1, "", "presyn_receptive"], [84, 2, 1, "", "selector"]], "inferno.neural.LinearDirect": [[85, 1, 1, "", "forward"], [85, 2, 1, "", "inshape"], [85, 1, 1, "", "like_input"], [85, 1, 1, "", "like_synaptic"], [85, 2, 1, "", "outshape"], [85, 1, 1, "", "postsyn_receptive"], [85, 1, 1, "", "presyn_receptive"], [85, 2, 1, "", "selector"]], "inferno.neural.LinearLateral": [[86, 2, 1, "", "delay"], [86, 1, 1, "", "forward"], [86, 2, 1, "", "inshape"], [86, 1, 1, "", "like_input"], [86, 1, 1, "", "like_synaptic"], [86, 2, 1, "", "outshape"], [86, 1, 1, "", "postsyn_receptive"], [86, 1, 1, "", "presyn_receptive"], [86, 2, 1, "", "selector"], [86, 2, 1, "", "weight"]], "inferno.neural.Neuron": [[87, 2, 1, "", "batchsz"], [87, 1, 1, "", "clear"], [87, 2, 1, "", "dt"], [87, 1, 1, "", "extra_repr"], [87, 1, 1, "", "forward"], [87, 2, 1, "", "refrac"], [87, 2, 1, "", "spike"], [87, 2, 1, "", "voltage"]], "inferno.neural.Normalization": [[88, 1, 1, "", "hook"]], "inferno.neural.PoissonIntervalEncoder": [[89, 1, 1, "", "forward"], [89, 2, 1, "", "frequency"]], "inferno.neural.QIF": [[90, 2, 1, "", "batchedshape"], [90, 2, 1, "", "batchsz"], [90, 1, 1, "", "clear"], [90, 2, 1, "", "count"], [90, 2, 1, "", "dt"], [90, 1, 1, "", "forward"], [90, 2, 1, "", "refrac"], [90, 2, 1, "", "shape"], [90, 2, 1, "", "spike"], [90, 2, 1, "", "voltage"]], "inferno.neural.Serial": [[91, 1, 1, "", "add_cell"], [91, 1, 1, "", "add_connection"], [91, 1, 1, "", "add_neuron"], [91, 2, 1, "", "cell"], [91, 2, 1, "", "connection"], [91, 1, 1, "", "del_cell"], [91, 1, 1, "", "del_connection"], [91, 1, 1, "", "del_neuron"], [91, 1, 1, "", "forward"], [91, 2, 1, "", "neuron"], [91, 2, 1, "", "synapse"], [91, 2, 1, "", "updater"], [91, 1, 1, "", "wiring"]], "inferno.neural.Synapse": [[92, 1, 1, "", "clear"], [92, 2, 1, "", "current"], [92, 1, 1, "", "current_at"], [92, 2, 1, "", "delay"], [92, 2, 1, "", "dt"], [92, 1, 1, "", "extra_repr"], [92, 1, 1, "", "forward"], [92, 1, 1, "", "partialconstructor"], [92, 2, 1, "", "spike"], [92, 1, 1, "", "spike_at"]], "inferno.neural.Updatable": [[94, 1, 1, "", "clear"], [94, 1, 1, "", "defaultupdater"], [94, 2, 1, "", "updatable"], [94, 1, 1, "", "update"], [94, 2, 1, "", "updater"], [94, 1, 1, "", "updatesome"]], "inferno.neural.Updater": [[95, 1, 1, "", "clear"], [95, 1, 1, "", "forward"], [95, 2, 1, "", "names"], [95, 2, 1, "", "parent"]], "inferno.neural.connections.mixins": [[96, 0, 1, "", "WeightBiasDelayMixin"], [97, 0, 1, "", "WeightBiasMixin"], [98, 0, 1, "", "WeightMixin"]], "inferno.neural.connections.mixins.WeightBiasDelayMixin": [[96, 2, 1, "", "delay"]], "inferno.neural.connections.mixins.WeightBiasMixin": [[97, 2, 1, "", "bias"]], "inferno.neural.connections.mixins.WeightMixin": [[98, 2, 1, "", "weight"]], "inferno.neural.functional": [[99, 3, 1, "", "adaptive_currents_linear"], [100, 3, 1, "", "adaptive_thresholds_linear_spike"], [101, 3, 1, "", "adaptive_thresholds_linear_voltage"], [102, 3, 1, "", "apply_adaptive_currents"], [103, 3, 1, "", "apply_adaptive_thresholds"], [104, 3, 1, "", "enc_homogeneous_poisson_exp_interval"], [105, 3, 1, "", "enc_homogeneous_poisson_exp_interval_online"], [106, 3, 1, "", "enc_inhomogenous_poisson_bernoulli_approx"], [107, 3, 1, "", "enc_poisson_interval"], [108, 3, 1, "", "enc_poisson_interval_online"], [109, 3, 1, "", "voltage_integration_linear"], [110, 3, 1, "", "voltage_integration_quadratic"], [111, 3, 1, "", "voltage_thresholding_constant"], [112, 3, 1, "", "voltage_thresholding_linear"]], "inferno.neural.mixins": [[113, 0, 1, "", "BatchMixin"], [114, 0, 1, "", "ShapeMixin"]], "inferno.neural.mixins.BatchMixin": [[113, 2, 1, "", "batchsz"]], "inferno.neural.mixins.ShapeMixin": [[114, 2, 1, "", "batchedshape"], [114, 2, 1, "", "count"], [114, 2, 1, "", "shape"]], "inferno.neural.neurons.mixins": [[115, 0, 1, "", "AdaptationMixin"], [116, 0, 1, "", "CurrentMixin"], [117, 0, 1, "", "RefractoryMixin"], [118, 0, 1, "", "SpikeRefractoryMixin"], [119, 0, 1, "", "VoltageMixin"]], "inferno.neural.neurons.mixins.AdaptationMixin": [[115, 2, 1, "", "adaptation"]], "inferno.neural.neurons.mixins.CurrentMixin": [[116, 2, 1, "", "current"]], "inferno.neural.neurons.mixins.RefractoryMixin": [[117, 2, 1, "", "refrac"]], "inferno.neural.neurons.mixins.SpikeRefractoryMixin": [[118, 2, 1, "", "spike"]], "inferno.neural.neurons.mixins.VoltageMixin": [[119, 2, 1, "", "voltage"]], "inferno.neural.synapses.mixins": [[120, 0, 1, "", "CurrentDerivedSpikeMixin"], [121, 0, 1, "", "CurrentMixin"], [122, 0, 1, "", "DelayedSpikeCurrentAccessorMixin"], [123, 0, 1, "", "SpikeCurrentMixin"], [124, 0, 1, "", "SpikeDerivedCurrentMixin"], [125, 0, 1, "", "SpikeMixin"]], "inferno.neural.synapses.mixins.CurrentDerivedSpikeMixin": [[120, 2, 1, "", "spike"]], "inferno.neural.synapses.mixins.CurrentMixin": [[121, 2, 1, "", "current"]], "inferno.neural.synapses.mixins.DelayedSpikeCurrentAccessorMixin": [[122, 1, 1, "", "current_at"], [122, 1, 1, "", "spike_at"]], "inferno.neural.synapses.mixins.SpikeDerivedCurrentMixin": [[124, 2, 1, "", "current"]], "inferno.neural.synapses.mixins.SpikeMixin": [[125, 2, 1, "", "spike"]], "inferno.observe": [[128, 0, 1, "", "ConditionalCumulativeTraceReducer"], [129, 0, 1, "", "ConditionalNearestTraceReducer"], [130, 0, 1, "", "CumulativeTraceReducer"], [131, 0, 1, "", "DifferenceMonitor"], [132, 0, 1, "", "EMAReducer"], [133, 0, 1, "", "EventReducer"], [134, 0, 1, "", "FoldReducer"], [135, 0, 1, "", "FoldingReducer"], [136, 0, 1, "", "InputMonitor"], [137, 0, 1, "", "Monitor"], [138, 0, 1, "", "MonitorConstructor"], [139, 0, 1, "", "NearestTraceReducer"], [140, 0, 1, "", "OutputMonitor"], [141, 0, 1, "", "PassthroughReducer"], [142, 0, 1, "", "Reducer"], [143, 0, 1, "", "ScaledCumulativeTraceReducer"], [144, 0, 1, "", "ScaledNearestTraceReducer"], [145, 0, 1, "", "StateMonitor"]], "inferno.observe.ConditionalCumulativeTraceReducer": [[128, 2, 1, "", "dt"], [128, 1, 1, "", "fold"], [128, 1, 1, "", "initialize"], [128, 1, 1, "", "interpolate"]], "inferno.observe.ConditionalNearestTraceReducer": [[129, 2, 1, "", "dt"], [129, 1, 1, "", "fold"], [129, 1, 1, "", "initialize"], [129, 1, 1, "", "interpolate"]], "inferno.observe.CumulativeTraceReducer": [[130, 2, 1, "", "dt"], [130, 1, 1, "", "fold"], [130, 1, 1, "", "initialize"], [130, 1, 1, "", "interpolate"]], "inferno.observe.DifferenceMonitor": [[131, 1, 1, "", "clear"], [131, 1, 1, "", "partialconstructor"]], "inferno.observe.EMAReducer": [[132, 1, 1, "", "fold"], [132, 1, 1, "", "initialize"], [132, 1, 1, "", "interpolate"]], "inferno.observe.EventReducer": [[133, 1, 1, "", "fold"], [133, 1, 1, "", "initialize"], [133, 1, 1, "", "interpolate"]], "inferno.observe.FoldReducer": [[134, 1, 1, "", "clear"], [134, 2, 1, "", "data"], [134, 2, 1, "", "dt"], [134, 1, 1, "", "dump"], [134, 2, 1, "", "duration"], [134, 1, 1, "", "forward"], [134, 1, 1, "", "peek"], [134, 1, 1, "", "push"], [134, 1, 1, "", "view"]], "inferno.observe.FoldingReducer": [[135, 1, 1, "", "fold"], [135, 1, 1, "", "initialize"], [135, 1, 1, "", "interpolate"]], "inferno.observe.InputMonitor": [[136, 1, 1, "", "partialconstructor"]], "inferno.observe.Monitor": [[137, 1, 1, "", "clear"], [137, 1, 1, "", "dump"], [137, 1, 1, "", "partialconstructor"], [137, 1, 1, "", "peek"], [137, 2, 1, "", "peeked"], [137, 2, 1, "", "reducer"], [137, 1, 1, "", "register"], [137, 1, 1, "", "view"]], "inferno.observe.NearestTraceReducer": [[139, 2, 1, "", "dt"], [139, 1, 1, "", "fold"], [139, 1, 1, "", "initialize"], [139, 1, 1, "", "interpolate"]], "inferno.observe.OutputMonitor": [[140, 1, 1, "", "partialconstructor"]], "inferno.observe.PassthroughReducer": [[141, 1, 1, "", "fold"], [141, 1, 1, "", "initialize"], [141, 1, 1, "", "interpolate"]], "inferno.observe.Reducer": [[142, 1, 1, "", "clear"], [142, 1, 1, "", "dump"], [142, 1, 1, "", "forward"], [142, 1, 1, "", "peek"], [142, 2, 1, "", "peeked"], [142, 1, 1, "", "push"], [142, 1, 1, "", "view"]], "inferno.observe.ScaledCumulativeTraceReducer": [[143, 2, 1, "", "dt"], [143, 1, 1, "", "fold"], [143, 1, 1, "", "initialize"], [143, 1, 1, "", "interpolate"]], "inferno.observe.ScaledNearestTraceReducer": [[144, 2, 1, "", "dt"], [144, 1, 1, "", "fold"], [144, 1, 1, "", "initialize"], [144, 1, 1, "", "interpolate"]], "inferno.observe.StateMonitor": [[145, 1, 1, "", "partialconstructor"]], "inferno.stats": [[150, 0, 1, "", "LogNormal"], [151, 0, 1, "", "Normal"], [152, 0, 1, "", "Poisson"]], "inferno.stats.LogNormal": [[150, 1, 1, "", "cdf"], [150, 1, 1, "", "logcdf"], [150, 1, 1, "", "logpdf"], [150, 1, 1, "", "mean"], [150, 1, 1, "", "params_mv"], [150, 1, 1, "", "pdf"], [150, 1, 1, "", "sample"], [150, 1, 1, "", "sample_mv"], [150, 1, 1, "", "validate"], [150, 1, 1, "", "variance"]], "inferno.stats.Normal": [[151, 1, 1, "", "cdf"], [151, 1, 1, "", "logcdf"], [151, 1, 1, "", "logpdf"], [151, 1, 1, "", "mean"], [151, 1, 1, "", "params_mv"], [151, 1, 1, "", "pdf"], [151, 1, 1, "", "sample"], [151, 1, 1, "", "sample_mv"], [151, 1, 1, "", "validate"], [151, 1, 1, "", "variance"]], "inferno.stats.Poisson": [[152, 1, 1, "", "cdf"], [152, 1, 1, "", "logcdf"], [152, 1, 1, "", "logpmf"], [152, 1, 1, "", "mean"], [152, 1, 1, "", "pmf"], [152, 1, 1, "", "sample"], [152, 1, 1, "", "validate"], [152, 1, 1, "", "variance"]], "inferno.types": [[157, 0, 1, "", "ManyToMany"], [158, 0, 1, "", "ManyToManyMethod"], [159, 0, 1, "", "ManyToOne"], [160, 0, 1, "", "ManyToOneMethod"], [161, 0, 1, "", "OneToMany"], [162, 0, 1, "", "OneToManyMethod"], [163, 0, 1, "", "OneToOne"], [164, 0, 1, "", "OneToOneMethod"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function", "4": "py:module", "5": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "module", "Python module"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"pragmat": 0, "consider": 0, "minibatch": 0, "discret": 0, "time": [0, 2, 169, 176], "simul": 0, "refractori": [0, 3], "period": [0, 3], "model": [0, 170, 174, 178, 179, 180, 181], "save": 0, "restor": 0, "guidebook": 1, "mathemat": 2, "note": 2, "exponenti": [2, 179], "decai": 2, "constant": 2, "trace": [2, 168, 176], "cumul": 2, "nearest": [2, 60], "scale": 2, "paramet": [2, 150, 151, 152, 168], "depend": [2, 169, 176, 177], "soft": 2, "hard": 2, "dirac": 2, "delta": [2, 180, 181], "heavisid": 2, "step": 2, "function": [2, 5, 171], "relationship": 2, "neuron": [3, 87, 170, 171, 174, 177, 178, 179], "system": 3, "dynam": [3, 171], "welcom": 4, "inferno": [4, 5, 168, 169, 170, 171, 172, 173], "": 4, "document": 4, "protocol": 5, "bound": [5, 168], "interpol": [5, 31, 56, 168], "extrapol": [5, 28], "contextualhook": 6, "dimensionalmodul": 7, "hook": [8, 170], "modul": [9, 176], "recordmodul": 10, "shape": [10, 62, 65, 66, 73, 74, 80, 84, 85, 86, 89, 99, 100, 101, 104, 105, 106, 107, 108, 122, 134], "statehook": 11, "astensor": 12, "fullbound": [13, 29], "halfbound": [14, 30], "lower_multipl": 15, "lower_pow": 16, "lower_sharp": 17, "multipl": 18, "power": 19, "sharp": 20, "upper_multipl": 21, "upper_pow": 22, "upper_sharp": 23, "empti": 24, "exp": 25, "exponential_smooth": 26, "full": 27, "bound_lower_multipl": 32, "bound_lower_pow": 33, "bound_lower_sharp": 34, "bound_multipl": 35, "bound_pow": 36, "bound_sharp": 37, "bound_upper_multipl": 38, "bound_upper_pow": 39, "bound_upper_sharp": 40, "extrap_expdecai": 41, "extrap_expratedecai": 42, "extrap_linear_backward": 43, "extrap_linear_forward": 44, "extrap_nearest": 45, "extrap_neighbor": 46, "extrap_next": 47, "extrap_previ": 48, "interp_expdecai": 49, "interp_expratedecai": 50, "interp_linear": 51, "interp_nearest": 52, "interp_next": 53, "interp_previ": 54, "holt_linear_smooth": 55, "expdecai": 57, "expratedecai": 58, "linear": [59, 177, 178], "previou": 61, "isi": 62, "celltrain": 63, "independenttrain": 64, "mstdpet": [65, 176], "maxrateclassifi": 66, "stdp": [67, 176], "alif": [68, 178], "adex": [69, 179], "bicliqu": 70, "cell": 71, "clamp": 72, "connect": [73, 170], "conv2d": 74, "deltacurr": 75, "deltapluscurr": 76, "eif": [77, 179], "glif1": [78, 178], "glif2": [79, 178], "homogeneouspoissonencod": 80, "izhikevich": [81, 179], "lif": [82, 178], "layer": 83, "lineardens": 84, "lineardirect": 85, "linearlater": 86, "normal": [88, 126, 127, 151], "poissonintervalencod": 89, "qif": [90, 179], "serial": 91, "synaps": [92, 170, 174, 180, 181], "synapseconstructor": 93, "updat": [94, 95, 169], "weightbiasdelaymixin": 96, "weightbiasmixin": 97, "weightmixin": 98, "adaptive_currents_linear": 99, "adaptive_thresholds_linear_spik": 100, "adaptive_thresholds_linear_voltag": 101, "apply_adaptive_curr": 102, "apply_adaptive_threshold": 103, "enc_homogeneous_poisson_exp_interv": 104, "enc_homogeneous_poisson_exp_interval_onlin": 105, "enc_inhomogenous_poisson_bernoulli_approx": 106, "enc_poisson_interv": 107, "enc_poisson_interval_onlin": 108, "voltage_integration_linear": 109, "voltage_integration_quadrat": 110, "voltage_thresholding_const": 111, "voltage_thresholding_linear": 112, "batchmixin": 113, "shapemixin": 114, "adaptationmixin": 115, "currentmixin": [116, 121], "refractorymixin": 117, "spikerefractorymixin": 118, "voltagemixin": 119, "currentderivedspikemixin": 120, "delayedspikecurrentaccessormixin": 122, "spikecurrentmixin": 123, "spikederivedcurrentmixin": 124, "spikemixin": 125, "conditionalcumulativetracereduc": 128, "conditionalnearesttracereduc": 129, "cumulativetracereduc": 130, "differencemonitor": 131, "emareduc": 132, "eventreduc": 133, "foldreduc": 134, "foldingreduc": 135, "inputmonitor": 136, "monitor": [137, 172], "monitorconstructor": 138, "nearesttracereduc": 139, "outputmonitor": 140, "passthroughreduc": 141, "reduc": [142, 172], "scaledcumulativetracereduc": 143, "scalednearesttracereduc": 144, "statemonitor": 145, "ones": 146, "rescal": 147, "scalar": 148, "sqrt": 149, "lognorm": 150, "support": [150, 151, 152], "poisson": 152, "trace_cumul": 153, "trace_cumulative_sc": 154, "trace_nearest": 155, "trace_nearest_sc": 156, "manytomani": 157, "manytomanymethod": 158, "manytoon": 159, "manytoonemethod": 160, "onetomani": 161, "onetomanymethod": 162, "onetoon": 163, "onetoonemethod": 164, "uniform": 165, "zero": 166, "api": 167, "refer": [167, 176, 177, 178, 179, 181], "infrastructur": 168, "tensor": 168, "creation": 168, "math": 168, "oper": 168, "spike": [168, 169, 176, 177], "type": [168, 170], "learn": [169, 174, 175, 176], "compon": [169, 170, 172], "plastic": [169, 176], "classifi": 169, "neural": [170, 171], "encod": [170, 171], "mixin": 170, "observ": 172, "stat": 173, "distribut": 173, "method": [174, 175, 176], "zoo": 174, "overview": [174, 175, 177], "resum": 175, "like": [175, 176], "hebbian": 176, "formul": [176, 177, 178, 179, 180, 181], "delai": 176, "mstdp": 176, "descript": [176, 178, 179, 181], "elig": 176, "triplet": 176, "adapt": [177, 178, 179], "current": [177, 181], "threshold": 177, "voltag": 177, "leaki": 178, "integr": [178, 179], "fire": [178, 179], "altern": 178, "gener": 178, "1": 178, "2": 178, "3": 178, "glif3": 178, "4": 178, "glif4": 178, "5": 178, "glif5": 178, "nonlinear": 179, "quadrat": 179, "conduct": 180, "base": [180, 181], "coba": 180, "variant": [180, 181], "cuba": 181}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Pragmatic Considerations": [[0, "pragmatic-considerations"]], "Minibatching": [[0, "minibatching"]], "Discrete Time Simulations": [[0, "discrete-time-simulations"]], "Refractory Periods": [[0, "refractory-periods"], [3, "refractory-periods"]], "Model Saving and Restoring": [[0, "model-saving-and-restoring"]], "Guidebook": [[1, "guidebook"]], "Mathematical Notes": [[2, "mathematical-notes"]], "Exponential Decay and Time Constants": [[2, "exponential-decay-and-time-constants"]], "Trace": [[2, "trace"]], "Cumulative Trace": [[2, "cumulative-trace"]], "Nearest Trace": [[2, "nearest-trace"]], "Scaling Trace": [[2, "scaling-trace"]], "Parameter Dependence": [[2, "parameter-dependence"]], "Soft Dependence": [[2, "soft-dependence"]], "Hard Dependence": [[2, "hard-dependence"]], "Dirac Delta and Heaviside Step Functions": [[2, "dirac-delta-and-heaviside-step-functions"]], "Dirac Delta Function": [[2, "dirac-delta-function"]], "Heaviside Step Function": [[2, "heaviside-step-function"]], "Relationship": [[2, "relationship"]], "Neurons and Neuronal Systems": [[3, "neurons-and-neuronal-systems"]], "Dynamics of a Neuron": [[3, "dynamics-of-a-neuron"]], "": [[3, "id1"]], "Welcome to Inferno\u2019s documentation!": [[4, "welcome-to-infernos-documentation"]], "inferno.functional": [[5, "module-inferno.functional"]], "Protocols": [[5, "protocols"]], "Bounding": [[5, "bounding"]], "Interpolation": [[5, "interpolation"], [5, "id1"], [31, "interpolation"], [56, "interpolation"], [168, "interpolation"]], "Extrapolation": [[5, "extrapolation"], [28, "extrapolation"]], "ContextualHook": [[6, "contextualhook"]], "DimensionalModule": [[7, "dimensionalmodule"]], "Hook": [[8, "hook"]], "Module": [[9, "module"]], "RecordModule": [[10, "recordmodule"]], "Shape": [[10, null], [62, null], [65, null], [66, null], [66, null], [66, null], [66, null], [66, null], [66, null], [66, null], [73, null], [73, null], [73, null], [73, null], [74, null], [74, null], [74, null], [74, null], [74, null], [74, null], [74, null], [80, null], [84, null], [84, null], [84, null], [84, null], [84, null], [84, null], [84, null], [85, null], [85, null], [85, null], [85, null], [85, null], [85, null], [85, null], [86, null], [86, null], [86, null], [86, null], [86, null], [86, null], [86, null], [89, null], [99, null], [100, null], [101, null], [104, null], [105, null], [106, null], [107, null], [108, null], [122, null], [122, null], [134, null]], "StateHook": [[11, "statehook"]], "astensors": [[12, "astensors"]], "FullBounding": [[13, "fullbounding"], [29, "fullbounding"]], "HalfBounding": [[14, "halfbounding"], [30, "halfbounding"]], "lower_multiplicative": [[15, "lower-multiplicative"]], "lower_power": [[16, "lower-power"]], "lower_sharp": [[17, "lower-sharp"]], "multiplicative": [[18, "multiplicative"]], "power": [[19, "power"]], "sharp": [[20, "sharp"]], "upper_multiplicative": [[21, "upper-multiplicative"]], "upper_power": [[22, "upper-power"]], "upper_sharp": [[23, "upper-sharp"]], "empty": [[24, "empty"]], "exp": [[25, "exp"]], "exponential_smoothing": [[26, "exponential-smoothing"]], "full": [[27, "full"]], "bound_lower_multiplicative": [[32, "bound-lower-multiplicative"]], "bound_lower_power": [[33, "bound-lower-power"]], "bound_lower_sharp": [[34, "bound-lower-sharp"]], "bound_multiplicative": [[35, "bound-multiplicative"]], "bound_power": [[36, "bound-power"]], "bound_sharp": [[37, "bound-sharp"]], "bound_upper_multiplicative": [[38, "bound-upper-multiplicative"]], "bound_upper_power": [[39, "bound-upper-power"]], "bound_upper_sharp": [[40, "bound-upper-sharp"]], "extrap_expdecay": [[41, "extrap-expdecay"]], "extrap_expratedecay": [[42, "extrap-expratedecay"]], "extrap_linear_backward": [[43, "extrap-linear-backward"]], "extrap_linear_forward": [[44, "extrap-linear-forward"]], "extrap_nearest": [[45, "extrap-nearest"]], "extrap_neighbors": [[46, "extrap-neighbors"]], "extrap_next": [[47, "extrap-next"]], "extrap_previous": [[48, "extrap-previous"]], "interp_expdecay": [[49, "interp-expdecay"]], "interp_expratedecay": [[50, "interp-expratedecay"]], "interp_linear": [[51, "interp-linear"]], "interp_nearest": [[52, "interp-nearest"]], "interp_next": [[53, "interp-next"]], "interp_previous": [[54, "interp-previous"]], "holt_linear_smoothing": [[55, "holt-linear-smoothing"]], "expdecay": [[57, "expdecay"]], "expratedecay": [[58, "expratedecay"]], "linear": [[59, "linear"]], "nearest": [[60, "nearest"]], "previous": [[61, "previous"]], "isi": [[62, "isi"]], "CellTrainer": [[63, "celltrainer"]], "IndependentTrainer": [[64, "independenttrainer"]], "MSTDPET": [[65, "mstdpet"]], "MaxRateClassifier": [[66, "maxrateclassifier"]], "STDP": [[67, "stdp"]], "ALIF": [[68, "alif"]], "AdEx": [[69, "adex"]], "Biclique": [[70, "biclique"]], "Cell": [[71, "cell"]], "Clamping": [[72, "clamping"]], "Connection": [[73, "connection"]], "Conv2D": [[74, "conv2d"]], "DeltaCurrent": [[75, "deltacurrent"]], "DeltaPlusCurrent": [[76, "deltapluscurrent"]], "EIF": [[77, "eif"]], "GLIF1": [[78, "glif1"]], "GLIF2": [[79, "glif2"]], "HomogeneousPoissonEncoder": [[80, "homogeneouspoissonencoder"]], "Izhikevich": [[81, "izhikevich"]], "LIF": [[82, "lif"]], "Layer": [[83, "layer"]], "LinearDense": [[84, "lineardense"]], "LinearDirect": [[85, "lineardirect"]], "LinearLateral": [[86, "linearlateral"]], "Neuron": [[87, "neuron"]], "Normalization": [[88, "normalization"]], "PoissonIntervalEncoder": [[89, "poissonintervalencoder"]], "QIF": [[90, "qif"]], "Serial": [[91, "serial"]], "Synapse": [[92, "synapse"]], "SynapseConstructor": [[93, "synapseconstructor"]], "Updatable": [[94, "updatable"]], "Updater": [[95, "updater"]], "WeightBiasDelayMixin": [[96, "weightbiasdelaymixin"]], "WeightBiasMixin": [[97, "weightbiasmixin"]], "WeightMixin": [[98, "weightmixin"]], "adaptive_currents_linear": [[99, "adaptive-currents-linear"]], "adaptive_thresholds_linear_spike": [[100, "adaptive-thresholds-linear-spike"]], "adaptive_thresholds_linear_voltage": [[101, "adaptive-thresholds-linear-voltage"]], "apply_adaptive_currents": [[102, "apply-adaptive-currents"]], "apply_adaptive_thresholds": [[103, "apply-adaptive-thresholds"]], "enc_homogeneous_poisson_exp_interval": [[104, "enc-homogeneous-poisson-exp-interval"]], "enc_homogeneous_poisson_exp_interval_online": [[105, "enc-homogeneous-poisson-exp-interval-online"]], "enc_inhomogenous_poisson_bernoulli_approx": [[106, "enc-inhomogenous-poisson-bernoulli-approx"]], "enc_poisson_interval": [[107, "enc-poisson-interval"]], "enc_poisson_interval_online": [[108, "enc-poisson-interval-online"]], "voltage_integration_linear": [[109, "voltage-integration-linear"]], "voltage_integration_quadratic": [[110, "voltage-integration-quadratic"]], "voltage_thresholding_constant": [[111, "voltage-thresholding-constant"]], "voltage_thresholding_linear": [[112, "voltage-thresholding-linear"]], "BatchMixin": [[113, "batchmixin"]], "ShapeMixin": [[114, "shapemixin"]], "AdaptationMixin": [[115, "adaptationmixin"]], "CurrentMixin": [[116, "currentmixin"], [121, "currentmixin"]], "RefractoryMixin": [[117, "refractorymixin"]], "SpikeRefractoryMixin": [[118, "spikerefractorymixin"]], "VoltageMixin": [[119, "voltagemixin"]], "CurrentDerivedSpikeMixin": [[120, "currentderivedspikemixin"]], "DelayedSpikeCurrentAccessorMixin": [[122, "delayedspikecurrentaccessormixin"]], "SpikeCurrentMixin": [[123, "spikecurrentmixin"]], "SpikeDerivedCurrentMixin": [[124, "spikederivedcurrentmixin"]], "SpikeMixin": [[125, "spikemixin"]], "normal": [[126, "normal"]], "normalize": [[127, "normalize"]], "ConditionalCumulativeTraceReducer": [[128, "conditionalcumulativetracereducer"]], "ConditionalNearestTraceReducer": [[129, "conditionalnearesttracereducer"]], "CumulativeTraceReducer": [[130, "cumulativetracereducer"]], "DifferenceMonitor": [[131, "differencemonitor"]], "EMAReducer": [[132, "emareducer"]], "EventReducer": [[133, "eventreducer"]], "FoldReducer": [[134, "foldreducer"]], "FoldingReducer": [[135, "foldingreducer"]], "InputMonitor": [[136, "inputmonitor"]], "Monitor": [[137, "monitor"]], "MonitorConstructor": [[138, "monitorconstructor"]], "NearestTraceReducer": [[139, "nearesttracereducer"]], "OutputMonitor": [[140, "outputmonitor"]], "PassthroughReducer": [[141, "passthroughreducer"]], "Reducer": [[142, "reducer"]], "ScaledCumulativeTraceReducer": [[143, "scaledcumulativetracereducer"]], "ScaledNearestTraceReducer": [[144, "scalednearesttracereducer"]], "StateMonitor": [[145, "statemonitor"]], "ones": [[146, "ones"]], "rescale": [[147, "rescale"]], "scalar": [[148, "scalar"]], "sqrt": [[149, "sqrt"]], "LogNormal": [[150, "lognormal"]], "Parameters": [[150, null], [151, null], [152, null]], "Support": [[150, null], [151, null], [152, null]], "Normal": [[151, "normal"]], "Poisson": [[152, "poisson"]], "trace_cumulative": [[153, "trace-cumulative"]], "trace_cumulative_scaled": [[154, "trace-cumulative-scaled"]], "trace_nearest": [[155, "trace-nearest"]], "trace_nearest_scaled": [[156, "trace-nearest-scaled"]], "ManyToMany": [[157, "manytomany"]], "ManyToManyMethod": [[158, "manytomanymethod"]], "ManyToOne": [[159, "manytoone"]], "ManyToOneMethod": [[160, "manytoonemethod"]], "OneToMany": [[161, "onetomany"]], "OneToManyMethod": [[162, "onetomanymethod"]], "OneToOne": [[163, "onetoone"]], "OneToOneMethod": [[164, "onetoonemethod"]], "uniform": [[165, "uniform"]], "zeros": [[166, "zeros"]], "API Reference": [[167, "api-reference"]], "inferno": [[168, "inferno"]], "Infrastructure": [[168, "infrastructure"]], "Tensor Creation": [[168, "tensor-creation"]], "Math Operations": [[168, "math-operations"]], "Spike Trace": [[168, "spike-trace"]], "Parameter Bounding": [[168, "parameter-bounding"]], "Types": [[168, "types"], [170, "types"]], "inferno.learn": [[169, "module-inferno.learn"]], "Components": [[169, "components"], [170, "components"], [172, "components"]], "Updaters, Spike-Timing Dependent Plasticity": [[169, "updaters-spike-timing-dependent-plasticity"]], "Classifiers": [[169, "classifiers"]], "inferno.neural": [[170, "module-inferno.neural"]], "Modeling": [[170, "modeling"]], "Neurons": [[170, "neurons"], [174, "neurons"]], "Synapses": [[170, "synapses"], [174, "synapses"]], "Connections": [[170, "connections"]], "Encoders": [[170, "encoders"]], "Hooks": [[170, "hooks"]], "Mixins": [[170, "mixins"]], "inferno.neural.functional": [[171, "module-inferno.neural.functional"]], "Encodings": [[171, "encodings"]], "Neuronal Dynamics": [[171, "neuronal-dynamics"]], "inferno.observe": [[172, "inferno-observe"]], "Monitors": [[172, "monitors"]], "Reducers": [[172, "reducers"]], "inferno.stats": [[173, "module-inferno.stats"]], "Distributions": [[173, "distributions"]], "Model and Method Zoo": [[174, "model-and-method-zoo"]], "Overview": [[174, "overview"], [175, "overview"], [177, "overview"]], "Learning Methods": [[174, "learning-methods"]], "ReSuMe-Like Learning Methods": [[175, "resume-like-learning-methods"]], "STDP-Like Learning Methods": [[176, "stdp-like-learning-methods"]], "Hebbian Learning": [[176, "hebbian-learning"]], "Spike Timing-Dependent Plasticity (STDP)": [[176, "spike-timing-dependent-plasticity-stdp"]], "Formulation": [[176, "formulation"], [176, "id1"], [176, "id2"], [177, "formulation"], [177, "id1"], [177, "id3"], [177, "id5"], [178, "formulation"], [178, "id1"], [178, "id4"], [179, "formulation"], [179, "id1"], [179, "id4"], [179, "id7"], [180, "formulation"], [181, "formulation"]], "Delayed Spike Timing-Dependent Plasticity (Delayed STDP)": [[176, "delayed-spike-timing-dependent-plasticity-delayed-stdp"]], "Modulated Spike-Timing Dependent Plasticity (MSTDP)": [[176, "modulated-spike-timing-dependent-plasticity-mstdp"]], "Description": [[176, "description"], [178, "description"], [178, "id2"], [178, "id5"], [179, "description"], [179, "id2"], [179, "id5"], [179, "id8"], [181, "description"]], "References": [[176, "references"], [176, "id3"], [177, "references"], [177, "id2"], [177, "id4"], [177, "id6"], [178, "references"], [178, "id3"], [178, "id6"], [179, "references"], [179, "id3"], [179, "id6"], [179, "id9"], [181, "references"]], "Modulated Spike-Timing Dependent Plasticity with Eligibility Trace (MSTDPET)": [[176, "modulated-spike-timing-dependent-plasticity-with-eligibility-trace-mstdpet"]], "Triplet Spike-Timing Dependent Plasticity (STDP)": [[176, "triplet-spike-timing-dependent-plasticity-stdp"]], "Neuronal Adaptation": [[177, "neuronal-adaptation"]], "Adaptive Current, Linear": [[177, "adaptive-current-linear"]], "Adaptive Current, Linear Spike-Dependent": [[177, "adaptive-current-linear-spike-dependent"]], "Adaptive Threshold, Linear Voltage-Dependent": [[177, "adaptive-threshold-linear-voltage-dependent"]], "Adaptive Threshold, Linear Spike-Dependent": [[177, "adaptive-threshold-linear-spike-dependent"]], "Neuron Models, Linear": [[178, "neuron-models-linear"]], "Leaky Integrate-and-Fire (LIF)": [[178, "leaky-integrate-and-fire-lif"]], "Alternative Formulations": [[178, "alternative-formulations"]], "Adaptive Leaky Integrate-and-Fire (ALIF)": [[178, "adaptive-leaky-integrate-and-fire-alif"]], "Generalized Leaky Integrate-and-Fire 1 (GLIF1)": [[178, "generalized-leaky-integrate-and-fire-1-glif1"]], "Generalized Leaky Integrate-and-Fire 2 (GLIF2)": [[178, "generalized-leaky-integrate-and-fire-2-glif2"]], "Generalized Leaky Integrate-and-Fire 3 (GLIF3)": [[178, "generalized-leaky-integrate-and-fire-3-glif3"]], "Generalized Leaky Integrate-and-Fire 4 (GLIF4)": [[178, "generalized-leaky-integrate-and-fire-4-glif4"]], "Generalized Leaky Integrate-and-Fire 5 (GLIF5)": [[178, "generalized-leaky-integrate-and-fire-5-glif5"]], "Neuron Models, Nonlinear": [[179, "neuron-models-nonlinear"]], "Quadratic Integrate-and-Fire (QIF)": [[179, "quadratic-integrate-and-fire-qif"]], "Izhikevich (Adaptive Quadratic)": [[179, "izhikevich-adaptive-quadratic"]], "Exponential Integrate-and-Fire (EIF)": [[179, "exponential-integrate-and-fire-eif"]], "Adaptive Exponential Integrate-and-Fire (AdEx)": [[179, "adaptive-exponential-integrate-and-fire-adex"]], "Synapse Models, Conductance-Based": [[180, "synapse-models-conductance-based"]], "Delta (COBA Variant)": [[180, "delta-coba-variant"]], "Synapse Models, Current-Based": [[181, "synapse-models-current-based"]], "Delta (CUBA Variant)": [[181, "delta-cuba-variant"]]}, "indexentries": {"inferno.functional": [[5, "module-inferno.functional"]], "module": [[5, "module-inferno.functional"], [169, "module-inferno.learn"], [170, "module-inferno.neural"], [171, "module-inferno.neural.functional"], [173, "module-inferno.stats"]], "contextualhook (class in inferno)": [[6, "inferno.ContextualHook"]], "dimensionalmodule (class in inferno)": [[7, "inferno.DimensionalModule"]], "compatible() (dimensionalmodule method)": [[7, "inferno.DimensionalModule.compatible"]], "compatible_() (dimensionalmodule class method)": [[7, "inferno.DimensionalModule.compatible_"]], "compatible_like() (dimensionalmodule method)": [[7, "inferno.DimensionalModule.compatible_like"]], "compatible_like_() (dimensionalmodule class method)": [[7, "inferno.DimensionalModule.compatible_like_"]], "constraints (dimensionalmodule property)": [[7, "inferno.DimensionalModule.constraints"]], "deregister_constrained() (dimensionalmodule method)": [[7, "inferno.DimensionalModule.deregister_constrained"]], "dims (dimensionalmodule property)": [[7, "inferno.DimensionalModule.dims"]], "dims_() (dimensionalmodule class method)": [[7, "inferno.DimensionalModule.dims_"]], "extra_repr() (dimensionalmodule method)": [[7, "inferno.DimensionalModule.extra_repr"]], "liveconstrain (dimensionalmodule property)": [[7, "inferno.DimensionalModule.liveconstrain"]], "reconstrain() (dimensionalmodule method)": [[7, "inferno.DimensionalModule.reconstrain"]], "register_constrained() (dimensionalmodule method)": [[7, "inferno.DimensionalModule.register_constrained"]], "validate() (dimensionalmodule method)": [[7, "inferno.DimensionalModule.validate"]], "hook (class in inferno)": [[8, "inferno.Hook"]], "deregister() (hook method)": [[8, "inferno.Hook.deregister"]], "evalexec (hook property)": [[8, "inferno.Hook.evalexec"]], "register() (hook method)": [[8, "inferno.Hook.register"]], "registered (hook property)": [[8, "inferno.Hook.registered"]], "trainexec (hook property)": [[8, "inferno.Hook.trainexec"]], "module (class in inferno)": [[9, "inferno.Module"]], "get_extra() (module method)": [[9, "inferno.Module.get_extra"]], "get_extra_state() (module method)": [[9, "inferno.Module.get_extra_state"]], "register_extra() (module method)": [[9, "inferno.Module.register_extra"]], "set_extra_state() (module method)": [[9, "inferno.Module.set_extra_state"]], "recordmodule (class in inferno)": [[10, "inferno.RecordModule"]], "aligned() (recordmodule method)": [[10, "inferno.RecordModule.aligned"]], "deregister_constrained() (recordmodule method)": [[10, "inferno.RecordModule.deregister_constrained"]], "dt (recordmodule property)": [[10, "inferno.RecordModule.dt"]], "duration (recordmodule property)": [[10, "inferno.RecordModule.duration"]], "latest() (recordmodule method)": [[10, "inferno.RecordModule.latest"]], "reconstrain() (recordmodule method)": [[10, "inferno.RecordModule.reconstrain"]], "record() (recordmodule method)": [[10, "inferno.RecordModule.record"]], "recordsz (recordmodule property)": [[10, "inferno.RecordModule.recordsz"]], "register_constrained() (recordmodule method)": [[10, "inferno.RecordModule.register_constrained"]], "reset() (recordmodule method)": [[10, "inferno.RecordModule.reset"]], "select() (recordmodule method)": [[10, "inferno.RecordModule.select"]], "statehook (class in inferno)": [[11, "inferno.StateHook"]], "forward() (statehook method)": [[11, "inferno.StateHook.forward"]], "hook() (statehook method)": [[11, "inferno.StateHook.hook"]], "module (statehook property)": [[11, "inferno.StateHook.module"]], "register() (statehook method)": [[11, "inferno.StateHook.register"]], "astensors() (in module inferno)": [[12, "inferno.astensors"]], "fullbounding (class in inferno.bounding)": [[13, "inferno.bounding.FullBounding"]], "halfbounding (class in inferno.bounding)": [[14, "inferno.bounding.HalfBounding"]], "lower_multiplicative() (in module inferno.bounding)": [[15, "inferno.bounding.lower_multiplicative"]], "lower_power() (in module inferno.bounding)": [[16, "inferno.bounding.lower_power"]], "lower_sharp() (in module inferno.bounding)": [[17, "inferno.bounding.lower_sharp"]], "multiplicative() (in module inferno.bounding)": [[18, "inferno.bounding.multiplicative"]], "power() (in module inferno.bounding)": [[19, "inferno.bounding.power"]], "sharp() (in module inferno.bounding)": [[20, "inferno.bounding.sharp"]], "upper_multiplicative() (in module inferno.bounding)": [[21, "inferno.bounding.upper_multiplicative"]], "upper_power() (in module inferno.bounding)": [[22, "inferno.bounding.upper_power"]], "upper_sharp() (in module inferno.bounding)": [[23, "inferno.bounding.upper_sharp"]], "empty() (in module inferno)": [[24, "inferno.empty"]], "exp() (in module inferno)": [[25, "inferno.exp"]], "exponential_smoothing() (in module inferno)": [[26, "inferno.exponential_smoothing"]], "full() (in module inferno)": [[27, "inferno.full"]], "extrapolation (class in inferno.functional)": [[28, "inferno.functional.Extrapolation"]], "fullbounding (class in inferno.functional)": [[29, "inferno.functional.FullBounding"]], "halfbounding (class in inferno.functional)": [[30, "inferno.functional.HalfBounding"]], "interpolation (class in inferno.functional)": [[31, "inferno.functional.Interpolation"]], "bound_lower_multiplicative() (in module inferno.functional)": [[32, "inferno.functional.bound_lower_multiplicative"]], "bound_lower_power() (in module inferno.functional)": [[33, "inferno.functional.bound_lower_power"]], "bound_lower_sharp() (in module inferno.functional)": [[34, "inferno.functional.bound_lower_sharp"]], "bound_multiplicative() (in module inferno.functional)": [[35, "inferno.functional.bound_multiplicative"]], "bound_power() (in module inferno.functional)": [[36, "inferno.functional.bound_power"]], "bound_sharp() (in module inferno.functional)": [[37, "inferno.functional.bound_sharp"]], "bound_upper_multiplicative() (in module inferno.functional)": [[38, "inferno.functional.bound_upper_multiplicative"]], "bound_upper_power() (in module inferno.functional)": [[39, "inferno.functional.bound_upper_power"]], "bound_upper_sharp() (in module inferno.functional)": [[40, "inferno.functional.bound_upper_sharp"]], "extrap_expdecay() (in module inferno.functional)": [[41, "inferno.functional.extrap_expdecay"]], "extrap_expratedecay() (in module inferno.functional)": [[42, "inferno.functional.extrap_expratedecay"]], "extrap_linear_backward() (in module inferno.functional)": [[43, "inferno.functional.extrap_linear_backward"]], "extrap_linear_forward() (in module inferno.functional)": [[44, "inferno.functional.extrap_linear_forward"]], "extrap_nearest() (in module inferno.functional)": [[45, "inferno.functional.extrap_nearest"]], "extrap_neighbors() (in module inferno.functional)": [[46, "inferno.functional.extrap_neighbors"]], "extrap_next() (in module inferno.functional)": [[47, "inferno.functional.extrap_next"]], "extrap_previous() (in module inferno.functional)": [[48, "inferno.functional.extrap_previous"]], "interp_expdecay() (in module inferno.functional)": [[49, "inferno.functional.interp_expdecay"]], "interp_expratedecay() (in module inferno.functional)": [[50, "inferno.functional.interp_expratedecay"]], "interp_linear() (in module inferno.functional)": [[51, "inferno.functional.interp_linear"]], "interp_nearest() (in module inferno.functional)": [[52, "inferno.functional.interp_nearest"]], "interp_next() (in module inferno.functional)": [[53, "inferno.functional.interp_next"]], "interp_previous() (in module inferno.functional)": [[54, "inferno.functional.interp_previous"]], "holt_linear_smoothing() (in module inferno)": [[55, "inferno.holt_linear_smoothing"]], "interpolation (class in inferno.interpolation)": [[56, "inferno.interpolation.Interpolation"]], "expdecay() (in module inferno.interpolation)": [[57, "inferno.interpolation.expdecay"]], "expratedecay() (in module inferno.interpolation)": [[58, "inferno.interpolation.expratedecay"]], "linear() (in module inferno.interpolation)": [[59, "inferno.interpolation.linear"]], "nearest() (in module inferno.interpolation)": [[60, "inferno.interpolation.nearest"]], "previous() (in module inferno.interpolation)": [[61, "inferno.interpolation.previous"]], "isi() (in module inferno)": [[62, "inferno.isi"]], "celltrainer (class in inferno.learn)": [[63, "inferno.learn.CellTrainer"]], "add_cell() (celltrainer method)": [[63, "inferno.learn.CellTrainer.add_cell"]], "add_monitor() (celltrainer method)": [[63, "inferno.learn.CellTrainer.add_monitor"]], "cells (celltrainer property)": [[63, "inferno.learn.CellTrainer.cells"]], "clear() (celltrainer method)": [[63, "inferno.learn.CellTrainer.clear"]], "del_cell() (celltrainer method)": [[63, "inferno.learn.CellTrainer.del_cell"]], "del_monitor() (celltrainer method)": [[63, "inferno.learn.CellTrainer.del_monitor"]], "forward() (celltrainer method)": [[63, "inferno.learn.CellTrainer.forward"]], "get_cell() (celltrainer method)": [[63, "inferno.learn.CellTrainer.get_cell"]], "get_monitor() (celltrainer method)": [[63, "inferno.learn.CellTrainer.get_monitor"]], "monitors (celltrainer property)": [[63, "inferno.learn.CellTrainer.monitors"]], "named_cells (celltrainer property)": [[63, "inferno.learn.CellTrainer.named_cells"]], "named_monitors (celltrainer property)": [[63, "inferno.learn.CellTrainer.named_monitors"]], "named_monitors_of() (celltrainer method)": [[63, "inferno.learn.CellTrainer.named_monitors_of"]], "train() (celltrainer method)": [[63, "inferno.learn.CellTrainer.train"]], "update() (celltrainer method)": [[63, "inferno.learn.CellTrainer.update"]], "independenttrainer (class in inferno.learn)": [[64, "inferno.learn.IndependentTrainer"]], "independenttrainer.unit (class in inferno.learn)": [[64, "inferno.learn.IndependentTrainer.Unit"]], "cell (independenttrainer.unit attribute)": [[64, "inferno.learn.IndependentTrainer.Unit.cell"]], "monitors (independenttrainer.unit attribute)": [[64, "inferno.learn.IndependentTrainer.Unit.monitors"]], "register_cell() (independenttrainer method)": [[64, "inferno.learn.IndependentTrainer.register_cell"]], "state (independenttrainer.unit attribute)": [[64, "inferno.learn.IndependentTrainer.Unit.state"]], "unit() (independenttrainer method)": [[64, "inferno.learn.IndependentTrainer.unit"]], "mstdpet (class in inferno.learn)": [[65, "inferno.learn.MSTDPET"]], "clear() (mstdpet method)": [[65, "inferno.learn.MSTDPET.clear"]], "forward() (mstdpet method)": [[65, "inferno.learn.MSTDPET.forward"]], "register_cell() (mstdpet method)": [[65, "inferno.learn.MSTDPET.register_cell"]], "maxrateclassifier (class in inferno.learn)": [[66, "inferno.learn.MaxRateClassifier"]], "assignments (maxrateclassifier property)": [[66, "inferno.learn.MaxRateClassifier.assignments"]], "forward() (maxrateclassifier method)": [[66, "inferno.learn.MaxRateClassifier.forward"]], "infer() (maxrateclassifier method)": [[66, "inferno.learn.MaxRateClassifier.infer"]], "learn() (maxrateclassifier method)": [[66, "inferno.learn.MaxRateClassifier.learn"]], "nclass (maxrateclassifier property)": [[66, "inferno.learn.MaxRateClassifier.nclass"]], "ndim (maxrateclassifier property)": [[66, "inferno.learn.MaxRateClassifier.ndim"]], "occurances (maxrateclassifier property)": [[66, "inferno.learn.MaxRateClassifier.occurances"]], "proportional (maxrateclassifier property)": [[66, "inferno.learn.MaxRateClassifier.proportional"]], "proportions (maxrateclassifier property)": [[66, "inferno.learn.MaxRateClassifier.proportions"]], "rates (maxrateclassifier property)": [[66, "inferno.learn.MaxRateClassifier.rates"]], "shape (maxrateclassifier property)": [[66, "inferno.learn.MaxRateClassifier.shape"]], "stdp (class in inferno.learn)": [[67, "inferno.learn.STDP"]], "forward() (stdp method)": [[67, "inferno.learn.STDP.forward"]], "register_cell() (stdp method)": [[67, "inferno.learn.STDP.register_cell"]], "alif (class in inferno.neural)": [[68, "inferno.neural.ALIF"]], "adaptation (alif property)": [[68, "inferno.neural.ALIF.adaptation"]], "batchedshape (alif property)": [[68, "inferno.neural.ALIF.batchedshape"]], "batchsz (alif property)": [[68, "inferno.neural.ALIF.batchsz"]], "clear() (alif method)": [[68, "inferno.neural.ALIF.clear"]], "count (alif property)": [[68, "inferno.neural.ALIF.count"]], "dt (alif property)": [[68, "inferno.neural.ALIF.dt"]], "forward() (alif method)": [[68, "inferno.neural.ALIF.forward"]], "refrac (alif property)": [[68, "inferno.neural.ALIF.refrac"]], "shape (alif property)": [[68, "inferno.neural.ALIF.shape"]], "spike (alif property)": [[68, "inferno.neural.ALIF.spike"]], "voltage (alif property)": [[68, "inferno.neural.ALIF.voltage"]], "adex (class in inferno.neural)": [[69, "inferno.neural.AdEx"]], "adaptation (adex property)": [[69, "inferno.neural.AdEx.adaptation"]], "batchedshape (adex property)": [[69, "inferno.neural.AdEx.batchedshape"]], "batchsz (adex property)": [[69, "inferno.neural.AdEx.batchsz"]], "clear() (adex method)": [[69, "inferno.neural.AdEx.clear"]], "count (adex property)": [[69, "inferno.neural.AdEx.count"]], "dt (adex property)": [[69, "inferno.neural.AdEx.dt"]], "forward() (adex method)": [[69, "inferno.neural.AdEx.forward"]], "refrac (adex property)": [[69, "inferno.neural.AdEx.refrac"]], "shape (adex property)": [[69, "inferno.neural.AdEx.shape"]], "spike (adex property)": [[69, "inferno.neural.AdEx.spike"]], "voltage (adex property)": [[69, "inferno.neural.AdEx.voltage"]], "biclique (class in inferno.neural)": [[70, "inferno.neural.Biclique"]], "add_cell() (biclique method)": [[70, "inferno.neural.Biclique.add_cell"]], "add_connection() (biclique method)": [[70, "inferno.neural.Biclique.add_connection"]], "add_neuron() (biclique method)": [[70, "inferno.neural.Biclique.add_neuron"]], "del_cell() (biclique method)": [[70, "inferno.neural.Biclique.del_cell"]], "del_connection() (biclique method)": [[70, "inferno.neural.Biclique.del_connection"]], "del_neuron() (biclique method)": [[70, "inferno.neural.Biclique.del_neuron"]], "wiring() (biclique method)": [[70, "inferno.neural.Biclique.wiring"]], "cell (class in inferno.neural)": [[71, "inferno.neural.Cell"]], "connection (cell property)": [[71, "inferno.neural.Cell.connection"]], "forward() (cell method)": [[71, "inferno.neural.Cell.forward"]], "local_remap() (cell method)": [[71, "inferno.neural.Cell.local_remap"]], "neuron (cell property)": [[71, "inferno.neural.Cell.neuron"]], "postspike (cell property)": [[71, "inferno.neural.Cell.postspike"]], "postvoltage (cell property)": [[71, "inferno.neural.Cell.postvoltage"]], "precurrent (cell property)": [[71, "inferno.neural.Cell.precurrent"]], "prespike (cell property)": [[71, "inferno.neural.Cell.prespike"]], "synapse (cell property)": [[71, "inferno.neural.Cell.synapse"]], "updater (cell property)": [[71, "inferno.neural.Cell.updater"]], "clamping (class in inferno.neural)": [[72, "inferno.neural.Clamping"]], "hook() (clamping method)": [[72, "inferno.neural.Clamping.hook"]], "connection (class in inferno.neural)": [[73, "inferno.neural.Connection"]], "batched_inshape (connection property)": [[73, "inferno.neural.Connection.batched_inshape"]], "batched_outshape (connection property)": [[73, "inferno.neural.Connection.batched_outshape"]], "batchsz (connection property)": [[73, "inferno.neural.Connection.batchsz"]], "bias (connection property)": [[73, "inferno.neural.Connection.bias"]], "biased (connection property)": [[73, "inferno.neural.Connection.biased"]], "clear() (connection method)": [[73, "inferno.neural.Connection.clear"]], "defaultupdater() (connection method)": [[73, "inferno.neural.Connection.defaultupdater"]], "delay (connection property)": [[73, "inferno.neural.Connection.delay"]], "delayedby (connection property)": [[73, "inferno.neural.Connection.delayedby"]], "dt (connection property)": [[73, "inferno.neural.Connection.dt"]], "extra_repr() (connection method)": [[73, "inferno.neural.Connection.extra_repr"]], "forward() (connection method)": [[73, "inferno.neural.Connection.forward"]], "inshape (connection property)": [[73, "inferno.neural.Connection.inshape"]], "insize() (connection method)": [[73, "inferno.neural.Connection.insize"]], "like_input() (connection method)": [[73, "inferno.neural.Connection.like_input"]], "like_synaptic() (connection method)": [[73, "inferno.neural.Connection.like_synaptic"]], "outshape (connection property)": [[73, "inferno.neural.Connection.outshape"]], "outsize() (connection method)": [[73, "inferno.neural.Connection.outsize"]], "postsyn_receptive() (connection method)": [[73, "inferno.neural.Connection.postsyn_receptive"]], "presyn_receptive() (connection method)": [[73, "inferno.neural.Connection.presyn_receptive"]], "selector (connection property)": [[73, "inferno.neural.Connection.selector"]], "synapse (connection property)": [[73, "inferno.neural.Connection.synapse"]], "syncurrent (connection property)": [[73, "inferno.neural.Connection.syncurrent"]], "synspike (connection property)": [[73, "inferno.neural.Connection.synspike"]], "weight (connection property)": [[73, "inferno.neural.Connection.weight"]], "conv2d (class in inferno.neural)": [[74, "inferno.neural.Conv2D"]], "forward() (conv2d method)": [[74, "inferno.neural.Conv2D.forward"]], "inshape (conv2d property)": [[74, "inferno.neural.Conv2D.inshape"]], "like_input() (conv2d method)": [[74, "inferno.neural.Conv2D.like_input"]], "like_synaptic() (conv2d method)": [[74, "inferno.neural.Conv2D.like_synaptic"]], "outshape (conv2d property)": [[74, "inferno.neural.Conv2D.outshape"]], "postsyn_receptive() (conv2d method)": [[74, "inferno.neural.Conv2D.postsyn_receptive"]], "presyn_receptive() (conv2d method)": [[74, "inferno.neural.Conv2D.presyn_receptive"]], "selector (conv2d property)": [[74, "inferno.neural.Conv2D.selector"]], "deltacurrent (class in inferno.neural)": [[75, "inferno.neural.DeltaCurrent"]], "clear() (deltacurrent method)": [[75, "inferno.neural.DeltaCurrent.clear"]], "dt (deltacurrent property)": [[75, "inferno.neural.DeltaCurrent.dt"]], "forward() (deltacurrent method)": [[75, "inferno.neural.DeltaCurrent.forward"]], "partialconstructor() (deltacurrent class method)": [[75, "inferno.neural.DeltaCurrent.partialconstructor"]], "deltapluscurrent (class in inferno.neural)": [[76, "inferno.neural.DeltaPlusCurrent"]], "clear() (deltapluscurrent method)": [[76, "inferno.neural.DeltaPlusCurrent.clear"]], "dt (deltapluscurrent property)": [[76, "inferno.neural.DeltaPlusCurrent.dt"]], "forward() (deltapluscurrent method)": [[76, "inferno.neural.DeltaPlusCurrent.forward"]], "partialconstructor() (deltapluscurrent class method)": [[76, "inferno.neural.DeltaPlusCurrent.partialconstructor"]], "eif (class in inferno.neural)": [[77, "inferno.neural.EIF"]], "batchedshape (eif property)": [[77, "inferno.neural.EIF.batchedshape"]], "batchsz (eif property)": [[77, "inferno.neural.EIF.batchsz"]], "clear() (eif method)": [[77, "inferno.neural.EIF.clear"]], "count (eif property)": [[77, "inferno.neural.EIF.count"]], "dt (eif property)": [[77, "inferno.neural.EIF.dt"]], "forward() (eif method)": [[77, "inferno.neural.EIF.forward"]], "refrac (eif property)": [[77, "inferno.neural.EIF.refrac"]], "shape (eif property)": [[77, "inferno.neural.EIF.shape"]], "spike (eif property)": [[77, "inferno.neural.EIF.spike"]], "voltage (eif property)": [[77, "inferno.neural.EIF.voltage"]], "glif1 (class in inferno.neural)": [[78, "inferno.neural.GLIF1"]], "batchedshape (glif1 property)": [[78, "inferno.neural.GLIF1.batchedshape"]], "batchsz (glif1 property)": [[78, "inferno.neural.GLIF1.batchsz"]], "clear() (glif1 method)": [[78, "inferno.neural.GLIF1.clear"]], "count (glif1 property)": [[78, "inferno.neural.GLIF1.count"]], "dt (glif1 property)": [[78, "inferno.neural.GLIF1.dt"]], "forward() (glif1 method)": [[78, "inferno.neural.GLIF1.forward"]], "refrac (glif1 property)": [[78, "inferno.neural.GLIF1.refrac"]], "shape (glif1 property)": [[78, "inferno.neural.GLIF1.shape"]], "spike (glif1 property)": [[78, "inferno.neural.GLIF1.spike"]], "voltage (glif1 property)": [[78, "inferno.neural.GLIF1.voltage"]], "glif2 (class in inferno.neural)": [[79, "inferno.neural.GLIF2"]], "adaptation (glif2 property)": [[79, "inferno.neural.GLIF2.adaptation"]], "batchedshape (glif2 property)": [[79, "inferno.neural.GLIF2.batchedshape"]], "batchsz (glif2 property)": [[79, "inferno.neural.GLIF2.batchsz"]], "clear() (glif2 method)": [[79, "inferno.neural.GLIF2.clear"]], "count (glif2 property)": [[79, "inferno.neural.GLIF2.count"]], "dt (glif2 property)": [[79, "inferno.neural.GLIF2.dt"]], "forward() (glif2 method)": [[79, "inferno.neural.GLIF2.forward"]], "refrac (glif2 property)": [[79, "inferno.neural.GLIF2.refrac"]], "shape (glif2 property)": [[79, "inferno.neural.GLIF2.shape"]], "spike (glif2 property)": [[79, "inferno.neural.GLIF2.spike"]], "voltage (glif2 property)": [[79, "inferno.neural.GLIF2.voltage"]], "homogeneouspoissonencoder (class in inferno.neural)": [[80, "inferno.neural.HomogeneousPoissonEncoder"]], "compensated (homogeneouspoissonencoder property)": [[80, "inferno.neural.HomogeneousPoissonEncoder.compensated"]], "forward() (homogeneouspoissonencoder method)": [[80, "inferno.neural.HomogeneousPoissonEncoder.forward"]], "frequency (homogeneouspoissonencoder property)": [[80, "inferno.neural.HomogeneousPoissonEncoder.frequency"]], "refrac (homogeneouspoissonencoder property)": [[80, "inferno.neural.HomogeneousPoissonEncoder.refrac"]], "izhikevich (class in inferno.neural)": [[81, "inferno.neural.Izhikevich"]], "adaptation (izhikevich property)": [[81, "inferno.neural.Izhikevich.adaptation"]], "batchedshape (izhikevich property)": [[81, "inferno.neural.Izhikevich.batchedshape"]], "batchsz (izhikevich property)": [[81, "inferno.neural.Izhikevich.batchsz"]], "clear() (izhikevich method)": [[81, "inferno.neural.Izhikevich.clear"]], "count (izhikevich property)": [[81, "inferno.neural.Izhikevich.count"]], "dt (izhikevich property)": [[81, "inferno.neural.Izhikevich.dt"]], "forward() (izhikevich method)": [[81, "inferno.neural.Izhikevich.forward"]], "refrac (izhikevich property)": [[81, "inferno.neural.Izhikevich.refrac"]], "shape (izhikevich property)": [[81, "inferno.neural.Izhikevich.shape"]], "spike (izhikevich property)": [[81, "inferno.neural.Izhikevich.spike"]], "voltage (izhikevich property)": [[81, "inferno.neural.Izhikevich.voltage"]], "lif (class in inferno.neural)": [[82, "inferno.neural.LIF"]], "batchedshape (lif property)": [[82, "inferno.neural.LIF.batchedshape"]], "batchsz (lif property)": [[82, "inferno.neural.LIF.batchsz"]], "clear() (lif method)": [[82, "inferno.neural.LIF.clear"]], "count (lif property)": [[82, "inferno.neural.LIF.count"]], "dt (lif property)": [[82, "inferno.neural.LIF.dt"]], "forward() (lif method)": [[82, "inferno.neural.LIF.forward"]], "refrac (lif property)": [[82, "inferno.neural.LIF.refrac"]], "shape (lif property)": [[82, "inferno.neural.LIF.shape"]], "spike (lif property)": [[82, "inferno.neural.LIF.spike"]], "voltage (lif property)": [[82, "inferno.neural.LIF.voltage"]], "layer (class in inferno.neural)": [[83, "inferno.neural.Layer"]], "add_cell() (layer method)": [[83, "inferno.neural.Layer.add_cell"]], "add_connection() (layer method)": [[83, "inferno.neural.Layer.add_connection"]], "add_neuron() (layer method)": [[83, "inferno.neural.Layer.add_neuron"]], "cells (layer property)": [[83, "inferno.neural.Layer.cells"]], "connections (layer property)": [[83, "inferno.neural.Layer.connections"]], "del_cell() (layer method)": [[83, "inferno.neural.Layer.del_cell"]], "del_connection() (layer method)": [[83, "inferno.neural.Layer.del_connection"]], "del_neuron() (layer method)": [[83, "inferno.neural.Layer.del_neuron"]], "forward() (layer method)": [[83, "inferno.neural.Layer.forward"]], "get_cell() (layer method)": [[83, "inferno.neural.Layer.get_cell"]], "get_connection() (layer method)": [[83, "inferno.neural.Layer.get_connection"]], "get_neuron() (layer method)": [[83, "inferno.neural.Layer.get_neuron"]], "named_cells (layer property)": [[83, "inferno.neural.Layer.named_cells"]], "named_connections (layer property)": [[83, "inferno.neural.Layer.named_connections"]], "named_neurons (layer property)": [[83, "inferno.neural.Layer.named_neurons"]], "named_synapses (layer property)": [[83, "inferno.neural.Layer.named_synapses"]], "neurons (layer property)": [[83, "inferno.neural.Layer.neurons"]], "update() (layer method)": [[83, "inferno.neural.Layer.update"]], "wiring() (layer method)": [[83, "inferno.neural.Layer.wiring"]], "lineardense (class in inferno.neural)": [[84, "inferno.neural.LinearDense"]], "forward() (lineardense method)": [[84, "inferno.neural.LinearDense.forward"]], "inshape (lineardense property)": [[84, "inferno.neural.LinearDense.inshape"]], "like_input() (lineardense method)": [[84, "inferno.neural.LinearDense.like_input"]], "like_synaptic() (lineardense method)": [[84, "inferno.neural.LinearDense.like_synaptic"]], "outshape (lineardense property)": [[84, "inferno.neural.LinearDense.outshape"]], "postsyn_receptive() (lineardense method)": [[84, "inferno.neural.LinearDense.postsyn_receptive"]], "presyn_receptive() (lineardense method)": [[84, "inferno.neural.LinearDense.presyn_receptive"]], "selector (lineardense property)": [[84, "inferno.neural.LinearDense.selector"]], "lineardirect (class in inferno.neural)": [[85, "inferno.neural.LinearDirect"]], "forward() (lineardirect method)": [[85, "inferno.neural.LinearDirect.forward"]], "inshape (lineardirect property)": [[85, "inferno.neural.LinearDirect.inshape"]], "like_input() (lineardirect method)": [[85, "inferno.neural.LinearDirect.like_input"]], "like_synaptic() (lineardirect method)": [[85, "inferno.neural.LinearDirect.like_synaptic"]], "outshape (lineardirect property)": [[85, "inferno.neural.LinearDirect.outshape"]], "postsyn_receptive() (lineardirect method)": [[85, "inferno.neural.LinearDirect.postsyn_receptive"]], "presyn_receptive() (lineardirect method)": [[85, "inferno.neural.LinearDirect.presyn_receptive"]], "selector (lineardirect property)": [[85, "inferno.neural.LinearDirect.selector"]], "linearlateral (class in inferno.neural)": [[86, "inferno.neural.LinearLateral"]], "delay (linearlateral property)": [[86, "inferno.neural.LinearLateral.delay"]], "forward() (linearlateral method)": [[86, "inferno.neural.LinearLateral.forward"]], "inshape (linearlateral property)": [[86, "inferno.neural.LinearLateral.inshape"]], "like_input() (linearlateral method)": [[86, "inferno.neural.LinearLateral.like_input"]], "like_synaptic() (linearlateral method)": [[86, "inferno.neural.LinearLateral.like_synaptic"]], "outshape (linearlateral property)": [[86, "inferno.neural.LinearLateral.outshape"]], "postsyn_receptive() (linearlateral method)": [[86, "inferno.neural.LinearLateral.postsyn_receptive"]], "presyn_receptive() (linearlateral method)": [[86, "inferno.neural.LinearLateral.presyn_receptive"]], "selector (linearlateral property)": [[86, "inferno.neural.LinearLateral.selector"]], "weight (linearlateral property)": [[86, "inferno.neural.LinearLateral.weight"]], "neuron (class in inferno.neural)": [[87, "inferno.neural.Neuron"]], "batchsz (neuron property)": [[87, "inferno.neural.Neuron.batchsz"]], "clear() (neuron method)": [[87, "inferno.neural.Neuron.clear"]], "dt (neuron property)": [[87, "inferno.neural.Neuron.dt"]], "extra_repr() (neuron method)": [[87, "inferno.neural.Neuron.extra_repr"]], "forward() (neuron method)": [[87, "inferno.neural.Neuron.forward"]], "refrac (neuron property)": [[87, "inferno.neural.Neuron.refrac"]], "spike (neuron property)": [[87, "inferno.neural.Neuron.spike"]], "voltage (neuron property)": [[87, "inferno.neural.Neuron.voltage"]], "normalization (class in inferno.neural)": [[88, "inferno.neural.Normalization"]], "hook() (normalization method)": [[88, "inferno.neural.Normalization.hook"]], "poissonintervalencoder (class in inferno.neural)": [[89, "inferno.neural.PoissonIntervalEncoder"]], "forward() (poissonintervalencoder method)": [[89, "inferno.neural.PoissonIntervalEncoder.forward"]], "frequency (poissonintervalencoder property)": [[89, "inferno.neural.PoissonIntervalEncoder.frequency"]], "qif (class in inferno.neural)": [[90, "inferno.neural.QIF"]], "batchedshape (qif property)": [[90, "inferno.neural.QIF.batchedshape"]], "batchsz (qif property)": [[90, "inferno.neural.QIF.batchsz"]], "clear() (qif method)": [[90, "inferno.neural.QIF.clear"]], "count (qif property)": [[90, "inferno.neural.QIF.count"]], "dt (qif property)": [[90, "inferno.neural.QIF.dt"]], "forward() (qif method)": [[90, "inferno.neural.QIF.forward"]], "refrac (qif property)": [[90, "inferno.neural.QIF.refrac"]], "shape (qif property)": [[90, "inferno.neural.QIF.shape"]], "spike (qif property)": [[90, "inferno.neural.QIF.spike"]], "voltage (qif property)": [[90, "inferno.neural.QIF.voltage"]], "serial (class in inferno.neural)": [[91, "inferno.neural.Serial"]], "add_cell() (serial method)": [[91, "inferno.neural.Serial.add_cell"]], "add_connection() (serial method)": [[91, "inferno.neural.Serial.add_connection"]], "add_neuron() (serial method)": [[91, "inferno.neural.Serial.add_neuron"]], "cell (serial property)": [[91, "inferno.neural.Serial.cell"]], "connection (serial property)": [[91, "inferno.neural.Serial.connection"]], "del_cell() (serial method)": [[91, "inferno.neural.Serial.del_cell"]], "del_connection() (serial method)": [[91, "inferno.neural.Serial.del_connection"]], "del_neuron() (serial method)": [[91, "inferno.neural.Serial.del_neuron"]], "forward() (serial method)": [[91, "inferno.neural.Serial.forward"]], "neuron (serial property)": [[91, "inferno.neural.Serial.neuron"]], "synapse (serial property)": [[91, "inferno.neural.Serial.synapse"]], "updater (serial property)": [[91, "inferno.neural.Serial.updater"]], "wiring() (serial method)": [[91, "inferno.neural.Serial.wiring"]], "synapse (class in inferno.neural)": [[92, "inferno.neural.Synapse"]], "clear() (synapse method)": [[92, "inferno.neural.Synapse.clear"]], "current (synapse property)": [[92, "inferno.neural.Synapse.current"]], "current_at() (synapse method)": [[92, "inferno.neural.Synapse.current_at"]], "delay (synapse property)": [[92, "inferno.neural.Synapse.delay"]], "dt (synapse property)": [[92, "inferno.neural.Synapse.dt"]], "extra_repr() (synapse method)": [[92, "inferno.neural.Synapse.extra_repr"]], "forward() (synapse method)": [[92, "inferno.neural.Synapse.forward"]], "partialconstructor() (synapse class method)": [[92, "inferno.neural.Synapse.partialconstructor"]], "spike (synapse property)": [[92, "inferno.neural.Synapse.spike"]], "spike_at() (synapse method)": [[92, "inferno.neural.Synapse.spike_at"]], "synapseconstructor (class in inferno.neural)": [[93, "inferno.neural.SynapseConstructor"]], "updatable (class in inferno.neural)": [[94, "inferno.neural.Updatable"]], "clear() (updatable method)": [[94, "inferno.neural.Updatable.clear"]], "defaultupdater() (updatable method)": [[94, "inferno.neural.Updatable.defaultupdater"]], "updatable (updatable property)": [[94, "inferno.neural.Updatable.updatable"]], "update() (updatable method)": [[94, "inferno.neural.Updatable.update"]], "updater (updatable property)": [[94, "inferno.neural.Updatable.updater"]], "updatesome() (updatable method)": [[94, "inferno.neural.Updatable.updatesome"]], "updater (class in inferno.neural)": [[95, "inferno.neural.Updater"]], "clear() (updater method)": [[95, "inferno.neural.Updater.clear"]], "forward() (updater method)": [[95, "inferno.neural.Updater.forward"]], "names (updater property)": [[95, "inferno.neural.Updater.names"]], "parent (updater property)": [[95, "inferno.neural.Updater.parent"]], "weightbiasdelaymixin (class in inferno.neural.connections.mixins)": [[96, "inferno.neural.connections.mixins.WeightBiasDelayMixin"]], "delay (weightbiasdelaymixin property)": [[96, "inferno.neural.connections.mixins.WeightBiasDelayMixin.delay"]], "weightbiasmixin (class in inferno.neural.connections.mixins)": [[97, "inferno.neural.connections.mixins.WeightBiasMixin"]], "bias (weightbiasmixin property)": [[97, "inferno.neural.connections.mixins.WeightBiasMixin.bias"]], "weightmixin (class in inferno.neural.connections.mixins)": [[98, "inferno.neural.connections.mixins.WeightMixin"]], "weight (weightmixin property)": [[98, "inferno.neural.connections.mixins.WeightMixin.weight"]], "adaptive_currents_linear() (in module inferno.neural.functional)": [[99, "inferno.neural.functional.adaptive_currents_linear"]], "adaptive_thresholds_linear_spike() (in module inferno.neural.functional)": [[100, "inferno.neural.functional.adaptive_thresholds_linear_spike"]], "adaptive_thresholds_linear_voltage() (in module inferno.neural.functional)": [[101, "inferno.neural.functional.adaptive_thresholds_linear_voltage"]], "apply_adaptive_currents() (in module inferno.neural.functional)": [[102, "inferno.neural.functional.apply_adaptive_currents"]], "apply_adaptive_thresholds() (in module inferno.neural.functional)": [[103, "inferno.neural.functional.apply_adaptive_thresholds"]], "enc_homogeneous_poisson_exp_interval() (in module inferno.neural.functional)": [[104, "inferno.neural.functional.enc_homogeneous_poisson_exp_interval"]], "enc_homogeneous_poisson_exp_interval_online() (in module inferno.neural.functional)": [[105, "inferno.neural.functional.enc_homogeneous_poisson_exp_interval_online"]], "enc_inhomogenous_poisson_bernoulli_approx() (in module inferno.neural.functional)": [[106, "inferno.neural.functional.enc_inhomogenous_poisson_bernoulli_approx"]], "enc_poisson_interval() (in module inferno.neural.functional)": [[107, "inferno.neural.functional.enc_poisson_interval"]], "enc_poisson_interval_online() (in module inferno.neural.functional)": [[108, "inferno.neural.functional.enc_poisson_interval_online"]], "voltage_integration_linear() (in module inferno.neural.functional)": [[109, "inferno.neural.functional.voltage_integration_linear"]], "voltage_integration_quadratic() (in module inferno.neural.functional)": [[110, "inferno.neural.functional.voltage_integration_quadratic"]], "voltage_thresholding_constant() (in module inferno.neural.functional)": [[111, "inferno.neural.functional.voltage_thresholding_constant"]], "voltage_thresholding_linear() (in module inferno.neural.functional)": [[112, "inferno.neural.functional.voltage_thresholding_linear"]], "batchmixin (class in inferno.neural.mixins)": [[113, "inferno.neural.mixins.BatchMixin"]], "batchsz (batchmixin property)": [[113, "inferno.neural.mixins.BatchMixin.batchsz"]], "shapemixin (class in inferno.neural.mixins)": [[114, "inferno.neural.mixins.ShapeMixin"]], "batchedshape (shapemixin property)": [[114, "inferno.neural.mixins.ShapeMixin.batchedshape"]], "count (shapemixin property)": [[114, "inferno.neural.mixins.ShapeMixin.count"]], "shape (shapemixin property)": [[114, "inferno.neural.mixins.ShapeMixin.shape"]], "adaptationmixin (class in inferno.neural.neurons.mixins)": [[115, "inferno.neural.neurons.mixins.AdaptationMixin"]], "adaptation (adaptationmixin property)": [[115, "inferno.neural.neurons.mixins.AdaptationMixin.adaptation"]], "currentmixin (class in inferno.neural.neurons.mixins)": [[116, "inferno.neural.neurons.mixins.CurrentMixin"]], "current (currentmixin property)": [[116, "inferno.neural.neurons.mixins.CurrentMixin.current"], [121, "inferno.neural.synapses.mixins.CurrentMixin.current"]], "refractorymixin (class in inferno.neural.neurons.mixins)": [[117, "inferno.neural.neurons.mixins.RefractoryMixin"]], "refrac (refractorymixin property)": [[117, "inferno.neural.neurons.mixins.RefractoryMixin.refrac"]], "spikerefractorymixin (class in inferno.neural.neurons.mixins)": [[118, "inferno.neural.neurons.mixins.SpikeRefractoryMixin"]], "spike (spikerefractorymixin property)": [[118, "inferno.neural.neurons.mixins.SpikeRefractoryMixin.spike"]], "voltagemixin (class in inferno.neural.neurons.mixins)": [[119, "inferno.neural.neurons.mixins.VoltageMixin"]], "voltage (voltagemixin property)": [[119, "inferno.neural.neurons.mixins.VoltageMixin.voltage"]], "currentderivedspikemixin (class in inferno.neural.synapses.mixins)": [[120, "inferno.neural.synapses.mixins.CurrentDerivedSpikeMixin"]], "spike (currentderivedspikemixin property)": [[120, "inferno.neural.synapses.mixins.CurrentDerivedSpikeMixin.spike"]], "currentmixin (class in inferno.neural.synapses.mixins)": [[121, "inferno.neural.synapses.mixins.CurrentMixin"]], "delayedspikecurrentaccessormixin (class in inferno.neural.synapses.mixins)": [[122, "inferno.neural.synapses.mixins.DelayedSpikeCurrentAccessorMixin"]], "current_at() (delayedspikecurrentaccessormixin method)": [[122, "inferno.neural.synapses.mixins.DelayedSpikeCurrentAccessorMixin.current_at"]], "spike_at() (delayedspikecurrentaccessormixin method)": [[122, "inferno.neural.synapses.mixins.DelayedSpikeCurrentAccessorMixin.spike_at"]], "spikecurrentmixin (class in inferno.neural.synapses.mixins)": [[123, "inferno.neural.synapses.mixins.SpikeCurrentMixin"]], "spikederivedcurrentmixin (class in inferno.neural.synapses.mixins)": [[124, "inferno.neural.synapses.mixins.SpikeDerivedCurrentMixin"]], "current (spikederivedcurrentmixin property)": [[124, "inferno.neural.synapses.mixins.SpikeDerivedCurrentMixin.current"]], "spikemixin (class in inferno.neural.synapses.mixins)": [[125, "inferno.neural.synapses.mixins.SpikeMixin"]], "spike (spikemixin property)": [[125, "inferno.neural.synapses.mixins.SpikeMixin.spike"]], "normal() (in module inferno)": [[126, "inferno.normal"]], "normalize() (in module inferno)": [[127, "inferno.normalize"]], "conditionalcumulativetracereducer (class in inferno.observe)": [[128, "inferno.observe.ConditionalCumulativeTraceReducer"]], "dt (conditionalcumulativetracereducer property)": [[128, "inferno.observe.ConditionalCumulativeTraceReducer.dt"]], "fold() (conditionalcumulativetracereducer method)": [[128, "inferno.observe.ConditionalCumulativeTraceReducer.fold"]], "initialize() (conditionalcumulativetracereducer method)": [[128, "inferno.observe.ConditionalCumulativeTraceReducer.initialize"]], "interpolate() (conditionalcumulativetracereducer method)": [[128, "inferno.observe.ConditionalCumulativeTraceReducer.interpolate"]], "conditionalnearesttracereducer (class in inferno.observe)": [[129, "inferno.observe.ConditionalNearestTraceReducer"]], "dt (conditionalnearesttracereducer property)": [[129, "inferno.observe.ConditionalNearestTraceReducer.dt"]], "fold() (conditionalnearesttracereducer method)": [[129, "inferno.observe.ConditionalNearestTraceReducer.fold"]], "initialize() (conditionalnearesttracereducer method)": [[129, "inferno.observe.ConditionalNearestTraceReducer.initialize"]], "interpolate() (conditionalnearesttracereducer method)": [[129, "inferno.observe.ConditionalNearestTraceReducer.interpolate"]], "cumulativetracereducer (class in inferno.observe)": [[130, "inferno.observe.CumulativeTraceReducer"]], "dt (cumulativetracereducer property)": [[130, "inferno.observe.CumulativeTraceReducer.dt"]], "fold() (cumulativetracereducer method)": [[130, "inferno.observe.CumulativeTraceReducer.fold"]], "initialize() (cumulativetracereducer method)": [[130, "inferno.observe.CumulativeTraceReducer.initialize"]], "interpolate() (cumulativetracereducer method)": [[130, "inferno.observe.CumulativeTraceReducer.interpolate"]], "differencemonitor (class in inferno.observe)": [[131, "inferno.observe.DifferenceMonitor"]], "clear() (differencemonitor method)": [[131, "inferno.observe.DifferenceMonitor.clear"]], "partialconstructor() (differencemonitor class method)": [[131, "inferno.observe.DifferenceMonitor.partialconstructor"]], "emareducer (class in inferno.observe)": [[132, "inferno.observe.EMAReducer"]], "fold() (emareducer method)": [[132, "inferno.observe.EMAReducer.fold"]], "initialize() (emareducer method)": [[132, "inferno.observe.EMAReducer.initialize"]], "interpolate() (emareducer method)": [[132, "inferno.observe.EMAReducer.interpolate"]], "eventreducer (class in inferno.observe)": [[133, "inferno.observe.EventReducer"]], "fold() (eventreducer method)": [[133, "inferno.observe.EventReducer.fold"]], "initialize() (eventreducer method)": [[133, "inferno.observe.EventReducer.initialize"]], "interpolate() (eventreducer method)": [[133, "inferno.observe.EventReducer.interpolate"]], "foldreducer (class in inferno.observe)": [[134, "inferno.observe.FoldReducer"]], "clear() (foldreducer method)": [[134, "inferno.observe.FoldReducer.clear"]], "data (foldreducer property)": [[134, "inferno.observe.FoldReducer.data"]], "dt (foldreducer property)": [[134, "inferno.observe.FoldReducer.dt"]], "dump() (foldreducer method)": [[134, "inferno.observe.FoldReducer.dump"]], "duration (foldreducer property)": [[134, "inferno.observe.FoldReducer.duration"]], "forward() (foldreducer method)": [[134, "inferno.observe.FoldReducer.forward"]], "peek() (foldreducer method)": [[134, "inferno.observe.FoldReducer.peek"]], "push() (foldreducer method)": [[134, "inferno.observe.FoldReducer.push"]], "view() (foldreducer method)": [[134, "inferno.observe.FoldReducer.view"]], "foldingreducer (class in inferno.observe)": [[135, "inferno.observe.FoldingReducer"]], "fold() (foldingreducer method)": [[135, "inferno.observe.FoldingReducer.fold"]], "initialize() (foldingreducer method)": [[135, "inferno.observe.FoldingReducer.initialize"]], "interpolate() (foldingreducer method)": [[135, "inferno.observe.FoldingReducer.interpolate"]], "inputmonitor (class in inferno.observe)": [[136, "inferno.observe.InputMonitor"]], "partialconstructor() (inputmonitor class method)": [[136, "inferno.observe.InputMonitor.partialconstructor"]], "monitor (class in inferno.observe)": [[137, "inferno.observe.Monitor"]], "clear() (monitor method)": [[137, "inferno.observe.Monitor.clear"]], "dump() (monitor method)": [[137, "inferno.observe.Monitor.dump"]], "partialconstructor() (monitor class method)": [[137, "inferno.observe.Monitor.partialconstructor"]], "peek() (monitor method)": [[137, "inferno.observe.Monitor.peek"]], "peeked (monitor property)": [[137, "inferno.observe.Monitor.peeked"]], "reducer (monitor property)": [[137, "inferno.observe.Monitor.reducer"]], "register() (monitor method)": [[137, "inferno.observe.Monitor.register"]], "view() (monitor method)": [[137, "inferno.observe.Monitor.view"]], "monitorconstructor (class in inferno.observe)": [[138, "inferno.observe.MonitorConstructor"]], "nearesttracereducer (class in inferno.observe)": [[139, "inferno.observe.NearestTraceReducer"]], "dt (nearesttracereducer property)": [[139, "inferno.observe.NearestTraceReducer.dt"]], "fold() (nearesttracereducer method)": [[139, "inferno.observe.NearestTraceReducer.fold"]], "initialize() (nearesttracereducer method)": [[139, "inferno.observe.NearestTraceReducer.initialize"]], "interpolate() (nearesttracereducer method)": [[139, "inferno.observe.NearestTraceReducer.interpolate"]], "outputmonitor (class in inferno.observe)": [[140, "inferno.observe.OutputMonitor"]], "partialconstructor() (outputmonitor class method)": [[140, "inferno.observe.OutputMonitor.partialconstructor"]], "passthroughreducer (class in inferno.observe)": [[141, "inferno.observe.PassthroughReducer"]], "fold() (passthroughreducer method)": [[141, "inferno.observe.PassthroughReducer.fold"]], "initialize() (passthroughreducer method)": [[141, "inferno.observe.PassthroughReducer.initialize"]], "interpolate() (passthroughreducer method)": [[141, "inferno.observe.PassthroughReducer.interpolate"]], "reducer (class in inferno.observe)": [[142, "inferno.observe.Reducer"]], "clear() (reducer method)": [[142, "inferno.observe.Reducer.clear"]], "dump() (reducer method)": [[142, "inferno.observe.Reducer.dump"]], "forward() (reducer method)": [[142, "inferno.observe.Reducer.forward"]], "peek() (reducer method)": [[142, "inferno.observe.Reducer.peek"]], "peeked (reducer property)": [[142, "inferno.observe.Reducer.peeked"]], "push() (reducer method)": [[142, "inferno.observe.Reducer.push"]], "view() (reducer method)": [[142, "inferno.observe.Reducer.view"]], "scaledcumulativetracereducer (class in inferno.observe)": [[143, "inferno.observe.ScaledCumulativeTraceReducer"]], "dt (scaledcumulativetracereducer property)": [[143, "inferno.observe.ScaledCumulativeTraceReducer.dt"]], "fold() (scaledcumulativetracereducer method)": [[143, "inferno.observe.ScaledCumulativeTraceReducer.fold"]], "initialize() (scaledcumulativetracereducer method)": [[143, "inferno.observe.ScaledCumulativeTraceReducer.initialize"]], "interpolate() (scaledcumulativetracereducer method)": [[143, "inferno.observe.ScaledCumulativeTraceReducer.interpolate"]], "scalednearesttracereducer (class in inferno.observe)": [[144, "inferno.observe.ScaledNearestTraceReducer"]], "dt (scalednearesttracereducer property)": [[144, "inferno.observe.ScaledNearestTraceReducer.dt"]], "fold() (scalednearesttracereducer method)": [[144, "inferno.observe.ScaledNearestTraceReducer.fold"]], "initialize() (scalednearesttracereducer method)": [[144, "inferno.observe.ScaledNearestTraceReducer.initialize"]], "interpolate() (scalednearesttracereducer method)": [[144, "inferno.observe.ScaledNearestTraceReducer.interpolate"]], "statemonitor (class in inferno.observe)": [[145, "inferno.observe.StateMonitor"]], "partialconstructor() (statemonitor class method)": [[145, "inferno.observe.StateMonitor.partialconstructor"]], "ones() (in module inferno)": [[146, "inferno.ones"]], "rescale() (in module inferno)": [[147, "inferno.rescale"]], "scalar() (in module inferno)": [[148, "inferno.scalar"]], "sqrt() (in module inferno)": [[149, "inferno.sqrt"]], "lognormal (class in inferno.stats)": [[150, "inferno.stats.LogNormal"]], "cdf() (lognormal class method)": [[150, "inferno.stats.LogNormal.cdf"]], "logcdf() (lognormal class method)": [[150, "inferno.stats.LogNormal.logcdf"]], "logpdf() (lognormal class method)": [[150, "inferno.stats.LogNormal.logpdf"]], "mean() (lognormal class method)": [[150, "inferno.stats.LogNormal.mean"]], "params_mv() (lognormal class method)": [[150, "inferno.stats.LogNormal.params_mv"]], "pdf() (lognormal class method)": [[150, "inferno.stats.LogNormal.pdf"]], "sample() (lognormal class method)": [[150, "inferno.stats.LogNormal.sample"]], "sample_mv() (lognormal class method)": [[150, "inferno.stats.LogNormal.sample_mv"]], "validate() (lognormal class method)": [[150, "inferno.stats.LogNormal.validate"]], "variance() (lognormal class method)": [[150, "inferno.stats.LogNormal.variance"]], "normal (class in inferno.stats)": [[151, "inferno.stats.Normal"]], "cdf() (normal class method)": [[151, "inferno.stats.Normal.cdf"]], "logcdf() (normal class method)": [[151, "inferno.stats.Normal.logcdf"]], "logpdf() (normal class method)": [[151, "inferno.stats.Normal.logpdf"]], "mean() (normal class method)": [[151, "inferno.stats.Normal.mean"]], "params_mv() (normal class method)": [[151, "inferno.stats.Normal.params_mv"]], "pdf() (normal class method)": [[151, "inferno.stats.Normal.pdf"]], "sample() (normal class method)": [[151, "inferno.stats.Normal.sample"]], "sample_mv() (normal class method)": [[151, "inferno.stats.Normal.sample_mv"]], "validate() (normal class method)": [[151, "inferno.stats.Normal.validate"]], "variance() (normal class method)": [[151, "inferno.stats.Normal.variance"]], "poisson (class in inferno.stats)": [[152, "inferno.stats.Poisson"]], "cdf() (poisson class method)": [[152, "inferno.stats.Poisson.cdf"]], "logcdf() (poisson class method)": [[152, "inferno.stats.Poisson.logcdf"]], "logpmf() (poisson class method)": [[152, "inferno.stats.Poisson.logpmf"]], "mean() (poisson class method)": [[152, "inferno.stats.Poisson.mean"]], "pmf() (poisson class method)": [[152, "inferno.stats.Poisson.pmf"]], "sample() (poisson class method)": [[152, "inferno.stats.Poisson.sample"]], "validate() (poisson class method)": [[152, "inferno.stats.Poisson.validate"]], "variance() (poisson class method)": [[152, "inferno.stats.Poisson.variance"]], "trace_cumulative() (in module inferno)": [[153, "inferno.trace_cumulative"]], "trace_cumulative_scaled() (in module inferno)": [[154, "inferno.trace_cumulative_scaled"]], "trace_nearest() (in module inferno)": [[155, "inferno.trace_nearest"]], "trace_nearest_scaled() (in module inferno)": [[156, "inferno.trace_nearest_scaled"]], "manytomany (class in inferno.types)": [[157, "inferno.types.ManyToMany"]], "manytomanymethod (class in inferno.types)": [[158, "inferno.types.ManyToManyMethod"]], "manytoone (class in inferno.types)": [[159, "inferno.types.ManyToOne"]], "manytoonemethod (class in inferno.types)": [[160, "inferno.types.ManyToOneMethod"]], "onetomany (class in inferno.types)": [[161, "inferno.types.OneToMany"]], "onetomanymethod (class in inferno.types)": [[162, "inferno.types.OneToManyMethod"]], "onetoone (class in inferno.types)": [[163, "inferno.types.OneToOne"]], "onetoonemethod (class in inferno.types)": [[164, "inferno.types.OneToOneMethod"]], "uniform() (in module inferno)": [[165, "inferno.uniform"]], "zeros() (in module inferno)": [[166, "inferno.zeros"]], "inferno.learn": [[169, "module-inferno.learn"]], "inferno.neural": [[170, "module-inferno.neural"]], "inferno.neural.functional": [[171, "module-inferno.neural.functional"]], "inferno.stats": [[173, "module-inferno.stats"]]}})